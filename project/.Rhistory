getwd()
setwd('/Users/kushal/Documents/singlecellseq/src/');
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
suppressMessages(suppressWarnings(library(data.table)))
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(gplots)))
suppressMessages(suppressWarnings(library(philentropy)))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(edgeR)))
suppressMessages(suppressWarnings(library(qtlcharts)))
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
getw()
getwd()
reads <- data.frame(fread('./data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('./data/molecules.txt'),row.names=1);
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
## Remove genes with max molecule numer larger than 1024
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
head(anno)
table(anno$batch)
table(anno$individual, anno$batch)
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
## Remove genes with max molecule numer larger than 1024
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
suppressMessages(suppressWarnings(library(data.table)))
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(gplots)))
suppressMessages(suppressWarnings(library(philentropy)))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(edgeR)))
suppressMessages(suppressWarnings(library(tsne)))
suppressMessages(suppressWarnings(library(qtlcharts)))
install.packages("philentropy")
biocLite("philentropy")
require(BiocInstaller)
biocLite("philentropy")
install.packages()
install.packages("philentropy")
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
reads <- data.frame(fread('./data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('./data/molecules.txt'),row.names=1);
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
dim(molecules_single)
dim(anno)
reads <- data.frame(fread('./data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('./data/molecules.txt'),row.names=1);
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
dim(anno)
dim(molecules)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
anno_single <- anno[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
dim(molecules_single)
dim(anno_single)
str(expressed)
str(anno)
reads <- data.frame(fread('./data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('./data/molecules.txt'),row.names=1);
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
str(molecules)
dim(molecules)
dim(anno)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
dim(moleucles)
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
cell_cycle_genes <- read.table("./data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
cell_cycle_genes <- read.table("./data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs <- unique(unlist(lapply(1:5, function(k) X =
match(cell_cycle_genes_list[[k]],
rownames(molecules_single)))) )
labs <-  labs[!is.na(labs)]
molecules_single_cell_cycle <- molecules_single[labs,]
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
#### normalization function
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase));
?topics
structure_cell_cycle_genes <- function(data,K, type_info)
{
Topic_clus <- topics(data, K=K, tol=0.005);
docweights <- Topic_clus$omega;
type_ordered <- type_info[order(type_info)];
docweights_ordered <- docweights[order(type_info),];
barplot(t(docweights_ordered),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",K),las=1,ylim=c(0,1),cex.axis=0.3,cex.main=1.4);
labels = match(unique(type_ordered), type_ordered);
abline(v=labels-1)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights_ordered)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(type_ordered),las=2,cex.axis=0.3);
}
sapply(2:7, function(k) structure_cell_cycle_genes(t(molecules_single_cell_cycle),
k,cell_phase_vector))
reads <- data.frame(fread('./data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('./data/molecules.txt'),row.names=1);
quality_single_cells <- scan("../data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('../data/annotation.txt'));
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs=unique(unlist(lapply(1:5, function(k) match(cell_cycle_genes_list[[k]],rownames(molecules_single)))));
labs = labs[!is.na(labs)];
molecules_single_cell_cycle <- molecules_single[labs,];
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
#### normalization function
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase));
counts_data <- t(molecules_single_cell_cycle);
cpm_data <- voom(counts_data)$E;
individual_id <- sapply(1:length(rownames(cpm_data)), function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][1]);
batch_id <- sapply(1:length(rownames(cpm_data)), function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][2]);
str(batch_id)
table(batch_id)
counts_data <- t(molecules_single_cell_cycle);
cpm_data <- voom(counts_data)$E
individual_id <- sapply(1:length(rownames(cpm_data)),
function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][1])
batch_id <- sapply(1:length(rownames(cpm_data)),
function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][2])
batch_removed_cpm <- matrix(0,dim(cpm_data)[1], dim(cpm_data)[2]);
for(g in 1:dim(cpm_data)[2])
{
res <- as.numeric(lm(cpm_data[,g] ~ individual_id+batch_id)$residuals);
batch_removed_cpm[,g] <- res;
}
table(individual_id)
counts_data <- t(molecules_single_cell_cycle);
cpm_data <- voom(counts_data)$E
individual_id <- sapply(1:length(rownames(cpm_data)),
function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][1])
batch_id <- sapply(1:length(rownames(cpm_data)),
function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][2])
batch_removed_cpm <- matrix(0,dim(cpm_data)[1], dim(cpm_data)[2])
for(g in 1:dim(cpm_data)[2])
{
res <- as.numeric(lm(cpm_data[,g] ~ individual_id+batch_id)$residuals);
batch_removed_cpm[,g] <- res;
}
col <- c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)),
rgb(1,seq(1,0,length=15),seq(1,0,length=15)))
library(gplots)
exp_batch_removed_cpm_data <- round(100*exp(batch_removed_cpm));
structure_cell_cycle_genes()
structure_cell_cycle_genes
exp_batch_removed_cpm_data <- round(100*exp(batch_removed_cpm));
data = exp_batch_removed_cpm_data
type_info = cell_phase_vector
K = 2
Topic_clus <- topics(data, K=K, tol=0.005);
str(Topic_clus)
names(Topic_clus)
head(Topic_clust$theta)
head(Topic_clus$theta)
dim(Topic_clus$theta)
dim(Topic_clus$omega)
wordweights <- Topic_clus$omega;
plot(word_weights$omega[ ,1])
word_weights <- Topic_clus$omega;
plot(word_weights$omega[ ,1])
plot(word_weights[ ,1])
plot(word_weights[ ,1], type = "h")
plot(word_weights[ ,2], type = "h")
sum(word_weights[,1])
sum(word_weights[,2])
sum(word_weights[,2])
summary(rowSums(word_weights))
word_weights <- Topic_clus$theta;
dim(word_weights)
plot(word_weights[ ,1], type = "h")
plot(word_weights[ ,2], type = "h")
summary(rowSums(word_weights))
summary(colSums(word_weights))
plot(word_weights[ ,1], type = "l")
lines(word_weights[ ,2], type = "l", col = "red")
word_order <- order(word_weights[,1])
word_order <- order(word_weights[,1])
plot(word_weights[ word_order, 1], type = "l")
lines(word_weights[ word_order, 2], type = "l", col = "red")
structure_cell_cycle_thetas <- function(data, K, type_info)
{
Topic_clus <- topics(data, K=K, tol=0.005)
word_weights <- Topic_clus$theta;
word_order <- order(word_weights[,1])
plot(word_weights[ word_order, 1], type = "l", col = 1)
for (i in 2:K) {
lines(word_weights[ word_order, i], type = "l", col = i)
}
}
sapply(2:7, function(k) {
structure_cell_cycle_thetas(exp_batch_removed_cpm_data, k, cell_phase_vector)
})
require(devtools)
install_github("HajkD/philentropy")
library(data.table)
library(maptpx)
library(gplots)
library(philentropy) # github: HajkD/philentropy
library(dplyr)
library(edgeR)
library(qtlcharts)
reads <- data.frame(fread('./data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('./data/molecules.txt'),row.names=1);
quality_single_cells <- scan("./data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('./data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
cell_cycle_genes <- read.table("./data/cellcyclegenes.txt", header = TRUE, sep="\t")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
iplotCurves_cell_cycle <- function(data,genes_list)
{
## data is assumed to be G \times N matrix, same as molecules_single
labs <- match(genes_list, rownames(data));
temp_data <- data[labs,];
iplotCurves(temp_data);
}
iplotCurves_cell_cycle <- function(data,genes_list)
{
## data is assumed to be a genes-by-samples matrix, same as molecules_single
labs <- match(genes_list, rownames(data));
temp_data <- data[labs,];
iplotCurves(temp_data);
}
iplotCurves_cell_cycle(molecules_single,cell_cycle_genes_list[[1]])
iplotCurves_cell_cycle(molecules_single,cell_cycle_genes_list[[4]])
ans <- sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,
average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
getwd()
reads <- data.frame(fread('./data/reads.txt'), row.names=1);
?fread
getwd()
reads <- data.frame(fread('data/reads.txt'), row.names=1)
library(data.table)
library(maptpx)
library(gplots)
library(philentropy) # github: HajkD/philentropy
library(dplyr)
library(edgeR)
library(qtlcharts)
reads <- data.frame(fread('data/reads.txt'), row.names=1)
library(data.table)
getwd()
