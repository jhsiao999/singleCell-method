}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
labs=unique(unlist(lapply(1:5, function(k) match(cell_cycle_genes_list[[k]],colnames(lcl_single_cells)))));
labs = labs[!is.na(labs)];
lcl_single_cell_cycle_genes <- lcl_single_cells[,labs];
molecules_single_LCL <- t(lcl_single_cells);
cell_phase_LCL <- paste0(as.vector(as.matrix(assign_cell_phase)),"_","LCL");
ipsc_qc_data <- read.table("../data/qc-ipsc.txt",header=TRUE);
labs <- which(ipsc_qc_data$cell_number==1)
batch_lab_iPSC <- ipsc_qc_data$batch[labs];
well_id <- ipsc_qc_data$well[labs];
ids <- sapply(well_id, function(x) substring(x,2,3))
lane_lab <- array(0, length(ids))
lane_lab[which(ids=="01" | ids=="02" | ids=="03")]=1;
lane_lab[which(ids=="04" | ids=="05" | ids=="06")]=2;
lane_lab[which(ids=="07" | ids=="08" | ids=="09")]=3;
lane_lab[which(ids=="10" | ids=="11" | ids=="12")]=4;
lane_lab_iPSC <- paste0(lane_lab,"_","iPSC");
molecules_single <- data.frame(fread('../data/molecules.txt'),row.names=1);
qc_ids <- paste0("NA",ipsc_qc_data[,1],".",ipsc_qc_data[,2],".",ipsc_qc_data[,3]);
molecules_single <- molecules_single[,match(qc_ids,colnames(molecules_single))];
molecules_single_iPSC <- molecules_single[,labs];
individual_lab_iPSC <- ipsc_qc_data$individual[labs]
reads_single <- data.frame(fread('../data/reads.txt'),row.names=1);
reads_single <- reads_single[,labs];
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_iPSC <- paste0(as.vector(as.matrix(assign_cell_phase)),"_","iPSC");
molecules_single_pooled <- t(cbind(molecules_single_iPSC,molecules_single_LCL));
lane_lab_pooled <- c(lane_lab_iPSC,lane_lab_LCL);
indiv_lab_pooled <- c(individual_lab_iPSC, individual_lab_LCL);
batch_lab_pooled <- c(batch_lab_iPSC, rep("LCL",84));
cell_phase_pooled <- c(cell_phase_iPSC, cell_phase_LCL);
nclus_vec <- 2:5;
data <- molecules_single_pooled
dim(data)
Topic_clus_list <- parallel::mclapply(nclus_vec, function(per_clust) {
maptpx::topics(data, K = per_clust, tol=0.005)
},mc.cores=detectCores())
library(parallel)
Topic_clus_list <- parallel::mclapply(nclus_vec, function(per_clust) {
maptpx::topics(data, K = per_clust, tol=0.005)
},mc.cores=detectCores())
Topic_clus_list
Topic_clus_list[[1]]
nclus_vec
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
maptpx::topics(data, K = per_clust, tol=0.005)
})
Topic_clus_list
Topic_clus_list[[1]]$omega
rowSums(Topic_clus_list[[1]]$omega)
names(Topic_clus_list) <- paste0("clust_",nclus_vec)
getwd()
path_rda="../../../project/rdas/topic_fit.rda"
save(Topic_clus_list, file = path_rda);
path_rda="../../../project/rdas/topic_fit_LCL.rda"
save(Topic_clus_list, file = path_rda);
Topic_clus_list <- load(path_rda);
Topic_clus_list[[1]]$omega
Topic_clus_list[[1]]
Topic_clus_list
path_rda
Topic_clus_list <- load(path_rda);
Topic_clus_list
load(path_rda)
rm(Topic_clus_list)
load(path_rda)
Topic_clus_list[[1]]$omega
Topic_clus_list[[2]]$omega
Topic_clus_list[[3]]$omega
Topic_clus_list[[4]]$omega
topic_get <- get(load(path_rda));
topic_get[[1]]$omega
topic_get[[2]]$omega
topic_get[[3]]$omega
length(topic_get)
path="."
path
install_github('kkdey/Countclust')
library(devtools)
install_github('kkdey/CountClust')
nclus_vec <- 2:5;
StructureObj(molecules_single_pooled,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL.rda",partition=c('TRUE'));
nclus_vec <- 2:5;
StructureObj(molecules_single_pooled,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL.rda",partition=c('TRUE'));
install_github('kkdey/CountClust')
nclus_vec <- 2:5;
StructureObj(molecules_single_pooled,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL.rda",partition=c('TRUE'));
lcl_topics <- get(load("../../../project/rdas/topic_fit_LCL.rda"));
for(num in 1:length(nclus_vec))
{
# if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"));
}
install_github('kkdey/CountClust')
for(num in 1:length(nclus_vec))
{
# if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"));
}
install_github('kkdey/CountClust')
for(num in 1:length(nclus_vec))
{
# if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"));
}
omega <- lcl_topics[[num]]$omega
dim(omega)
samp_metadata = samp_metadata
control=list()
control.default <- list(struct.width=600, struct.height=400, cex.axis=0.5, cex.main=1.5, las=2, lwd=2,
mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(omega)[2]+1));
if(is.null(path_struct)) path_struct=getwd();
namc=names(control)
if (!all(namc %in% names(control.default)))
stop("unknown names in control: ", namc[!(namc %in% names(control.default))])
control=modifyList(control.default, control)
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
docweights <- as.matrix(omega);
nclus <- dim(docweights)[2];
num_metadata <- dim(samp_metadata)[2];
path_struct <- NULL
if(is.null(path_struct)) path_struct=getwd();
path_struct
num
metadata_vec <- samp_metadata[,num];
metadata_ordered <- metadata_vec[order(metadata_vec)];
docweights_ordered <- docweights[order(metadata_vec),];
dim(docweights)
metadata_vec
batch_indiv_pooled <- paste0(indiv_lab_pooled,".",batch_lab_pooled);
samp_metadata <- cbind.data.frame(indiv_lab_pooled, lane_lab_pooled, batch_lab_pooled, cell_phase_pooled, batch_indiv_pooled);
colnames(samp_metadata) = c("individual", "lane", "batch", "cell_phase", "indiv.batch");
dim(samp_metadata)
lcl_topics <- get(load("../../../project/rdas/topic_fit_LCL.rda"));
for(num in 1:length(nclus_vec))
{
# if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"));
}
for(num in 1:length(nclus_vec))
{
# if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"),path_struct=paste0('../../figures/lcl_structure/clus_',nclus_vec[num]));
}
if(!dir.exists("../../figures/lcl_structure")) dir.create("../../figures/lcl_structure")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"),path_struct=paste0('../../figures/lcl_structure/clus_',nclus_vec[num]));
}
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"),path_struct=paste0('../../figures/lcl_structure/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
batch_corrected_pooled <- BatchCorrectedCounts(molecules_single_pooled,batch_indiv_pooled,use_parallel=TRUE)
install_github('kkdey/Countclust')
nclus_vec <- 2:5;
StructureObj(batch_corrected_pooled,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL_batchcorrect.rda",partition=rep('TRUE',dim(samp_metadata)[2]),path_struct = NULL);
lcl_topics_batchcorrect <- get(load("../../../project/rdas/topic_fit_LCL_batchcorrect.rda"));
if(!dir.exists("../../figures/lcl_structure_batchcorrect")) dir.create("../../figures/lcl_structure_batchcorrect")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure_batchcorrect/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure_batchcorrect/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics_batchcorrect[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"),path_struct=paste0('../../figures/lcl_structure_batchcorrect/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
labs=unique(unlist(lapply(1:5, function(k) match(cell_cycle_genes_list[[k]],colnames(lcl_single_cells)))));
labs = labs[!is.na(labs)];
molecules_pooled_cell_cycle_genes <- molecules_single_pooled[,labs];
nclus_vec <- 2:5;
StructureObj(batch_corrected_pooled,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL_cellcycle.rda",partition=rep('TRUE',dim(samp_metadata)[2]),path_struct = NULL);
nclus_vec <- 2:5;
StructureObj(molecules_pooled_cell_cycle_genes,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL_cellcycle.rda",partition=rep('TRUE',dim(samp_metadata)[2]),path_struct = NULL);
lcl_topics_cellcycle <- get(load("../../../project/rdas/topic_fit_LCL_cellcycle.rda"));
if(!dir.exists("../../figures/lcl_structure_cellcycle")) dir.create("../../figures/lcl_structure_cellcycle")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure_cellcycle/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure_cellcycle/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics_cellcycle[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"),path_struct=paste0('../../figures/lcl_structure_cellcycle/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
batch_corrected_cell_cycle_genes <- BatchCorrectedCounts(molecules_pooled_cell_cycle_genes,batch_indiv_pooled,use_parallel=TRUE)
nclus_vec <- 2:5;
StructureObj(batch_corrected_cell_cycle_genes,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_LCL_cellcycle_batchcorrect.rda",partition=rep('TRUE',dim(samp_metadata)[2]),path_struct = NULL);
lcl_topics_cellcycle_batchcorrect <- get(load("../../../project/rdas/topic_fit_LCL_cellcycle_batchcorrect.rda"));
if(!dir.exists("../../figures/lcl_structure_cellcycle_batchcorrect")) dir.create("../../figures/lcl_structure_cellcycle_batchcorrect")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure_cellcycle_batchcorrect/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure_cellcycle_batchcorrect/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics_cellcycle_batchcorrect[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = c("TRUE","TRUE","TRUE","TRUE","TRUE"),path_struct=paste0('../../figures/lcl_structure_cellcycle_batchcorrect/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
install_github('kkdey/CountClust')
rm(list=ls())
setwd('/Users/kushal/Documents/singleCell-method/project/LCL/src')
suppressMessages(suppressWarnings(library(CountClust)))
suppressMessages(suppressWarnings(library(data.table)))
suppressMessages(suppressWarnings(library(gplots)))
suppressMessages(suppressWarnings(library(philentropy)))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(edgeR)))
suppressMessages(suppressWarnings(library(qtlcharts)))
suppressMessages(suppressWarnings(library(limma)))
suppressMessages(suppressWarnings(library(readr)))
lcl_qc_data <- read_csv("../data/qc-lcl.csv");
lcl_annotations <- read.table('../data/annotation-lcl.txt',header=TRUE);
lcl_molecules <- t(data.frame(fread('../data/molecules-lcl.txt'), row.names = 1));
lcl_indices <- match(lcl_qc_data$ll_name, lcl_annotations$well)
lcl_molecules_refined <- lcl_molecules[lcl_indices,];
lcl_annotations_refined <- lcl_annotations[lcl_indices,];
well_id <- lcl_annotations_refined$well;
ids <- sapply(well_id, function(x) substring(x,2,3))
batch_lab <- array(0, length(ids))
batch_lab[which(ids=="01" | ids=="02" | ids=="03")]=1;
batch_lab[which(ids=="04" | ids=="05" | ids=="06")]=2;
batch_lab[which(ids=="07" | ids=="08" | ids=="09")]=3;
batch_lab[which(ids=="10" | ids=="11" | ids=="12")]=4;
lcl_single_cells <- lcl_molecules_refined[which(lcl_qc_data$cell.num==1),];
batch_lab_single_cells <- batch_lab[which(lcl_qc_data$cell.num==1)];
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- reads_lcl[,lcl_indices];
reads_lcl_single <- reads_lcl[,which(lcl_qc_data$cell.num==1)];
reads_single <- as.matrix(reads_lcl_single)
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
labs=unique(unlist(lapply(1:5, function(k) match(cell_cycle_genes_list[[k]],colnames(lcl_single_cells)))));
labs = labs[!is.na(labs)];
lcl_single_cell_cycle_genes <- lcl_single_cells[,labs];
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
nclus_vec <- 2:5;
StructureObj(lcl_single_cell_cycle_genes,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl_cellcycle.rda",partition=c('TRUE'),path_struct = NULL);
lcl_cellcycle_topics <- get(load("../../../project/rdas/topic_fit_lcl_cellcycle.rda"));
if(!dir.exists("../../figures/lcl_cellcycle_structure")) dir.create("../../figures/lcl_cellcycle_structure")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_cellcycle_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_cellcycle_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(ipsc_lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_cellcycle_structure/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
lcl_cellcycle_topics <- get(load("../../../project/rdas/topic_fit_lcl_cellcycle.rda"));
if(!dir.exists("../../figures/lcl_cellcycle_structure")) dir.create("../../figures/lcl_cellcycle_structure")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_cellcycle_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_cellcycle_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_cellcycle_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_cellcycle_structure/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
batch_corrected_cell_cycle_genes <- BatchCorrectedCounts(lcl_single_cell_cycle_genes,batch_lab_single_cells,use_parallel=TRUE)
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
nclus_vec <- 2:5;
StructureObj(batch_corrected_cell_cycle_genes,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl_cellcycle_batchcorrect.rda",partition=c('TRUE'),path_struct = NULL);
lcl_cellcycle_topics_batchcorrect <- get(load("../../../project/rdas/topic_fit_lcl_cellcycle_batchcorrect.rda"));
if(!dir.exists("../../figures/lcl_cellcycle_batchcorrect_structure")) dir.create("../../figures/lcl_cellcycle_batchcorrect_structure")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_cellcycle_batchcorrect_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_cellcycle_batchcorrect_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_cellcycle_topics_batchcorrect[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_cellcycle_batchcorrect_structure/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
lcl_qc_data <- read_csv("../data/qc-lcl.csv");
lcl_annotations <- read.table('../data/annotation-lcl.txt',header=TRUE);
lcl_molecules <- t(data.frame(fread('../data/molecules-lcl.txt'), row.names = 1));
lcl_indices <- match(lcl_qc_data$ll_name, lcl_annotations$well)
lcl_molecules_refined <- lcl_molecules[lcl_indices,];
lcl_annotations_refined <- lcl_annotations[lcl_indices,];
lcl_molecules_refined <- handleNA(lcl_molecules_refined)$data;
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
nclus_vec <- 2:5;
StructureObj(lcl_molecules_refined ,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl.rda",partition=c('TRUE'),path_struct = NULL);
lcl_topics <- get(load("../../../project/rdas/topic_fit_lcl.rda"));
if(!dir.exists("../../figures/lcl_structure")) dir.create("../../figures/lcl_structure")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_structure/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
well_id <- lcl_annotations_refined$well;
ids <- sapply(well_id, function(x) substring(x,2,3))
batch_lab <- array(0, length(ids))
batch_lab[which(ids=="01" | ids=="02" | ids=="03")]=1;
batch_lab[which(ids=="04" | ids=="05" | ids=="06")]=2;
batch_lab[which(ids=="07" | ids=="08" | ids=="09")]=3;
batch_lab[which(ids=="10" | ids=="11" | ids=="12")]=4;
samp_metadata <- cbind.data.frame(1:96);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_structure/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
batch_corrected_lcl_molecules <- BatchCorrectedCounts(lcl_molecules_refined,batch_lab,use_parallel=TRUE)
nclus_vec <- 2:5;
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
StructureObj(batch_corrected_lcl_molecules,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl_batchcorrect.rda",partition=c('TRUE'),path_struct = NULL);
lcl_topics_batchcorrect <- get(load("../../../project/rdas/topic_fit_lcl_batchcorrect.rda"));
if(!dir.exists("../../figures/lcl_structure_batchcorrect")) dir.create("../../figures/lcl_structure_batchcorrect")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure_batchcorrect/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure_batchcorrect/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics_batchcorrect[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_structure_batchcorrect/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
lcl_single_cells <- lcl_molecules_refined[which(lcl_qc_data$cell.num==1),];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- reads_lcl[,lcl_indices];
reads_lcl_single <- reads_lcl[,which(lcl_qc_data$cell.num==1)];
reads_single <- as.matrix(reads_lcl_single)
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
nclus_vec <- 2:5;
StructureObj(lcl_single_cells ,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl_single.rda",partition=c('TRUE'),path_struct = NULL);
lcl_topics_single <- get(load("../../../project/rdas/topic_fit_lcl_single.rda"));
if(!dir.exists("../../figures/lcl_structure_single")) dir.create("../../figures/lcl_structure_single")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("../../figures/lcl_structure_single/clus_",nclus_vec[num]))) dir.create(paste0("../../figures/lcl_structure_single/clus_",nclus_vec[num]))
obj <- StructureObj_omega(lcl_topics_single[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct=paste0('../../figures/lcl_structure_single/clus_',nclus_vec[num]),control=list(cex.axis=1));
}
batch_corrected_lcl_single <- BatchCorrectedCounts(lcl_single_cells,batch_lab_single_cells,use_parallel=TRUE)
nclus_vec <- 2:5;
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
if(!dir.exists("../../figures/lcl_structure_batchcorrect_single")) dir.create("../../figures/lcl_structure_batchcorrect_single")
StructureObj(batch_corrected_lcl_single,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl_batchcorrect_single.rda",partition=c('TRUE'),path_struct = "../../figures/lcl_structure_batchcorrect_single");
lcl_topics_batchcorrect_single <- get(load("../../../project/rdas/topic_fit_lcl_batchcorrect_single.rda"));
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_batchcorrect_single[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../../figures/lcl_structure_batchcorrect_single',control=list(cex.axis=1));
}
install_github('kkdey/CountClust')
samp_metadata <- cbind.data.frame(1:96);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../../figures/lcl_structure_bulk',control=list(cex.axis=1));
}
batch_corrected_lcl_molecules <- BatchCorrectedCounts(lcl_molecules_refined,batch_lab,use_parallel=TRUE)
nclus_vec <- 2:5;
samp_metadata <- cbind.data.frame(1:96);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
if(!dir.exists("../../figures/lcl_structure_batchcorrect_bulk")) dir.create("../../figures/lcl_structure_batchcorrect_bulk")
#StructureObj(batch_corrected_lcl_molecules,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../../../project/rdas/topic_fit_lcl_batchcorrect_bulk.rda",partition=c('TRUE'),path_struct = "../../figures/lcl_structure_batchcorrect_bulk");
lcl_topics_batchcorrect <- get(load("../../../project/rdas/topic_fit_lcl_batchcorrect_bulk.rda"));
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_batchcorrect[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../../figures/lcl_structure_batchcorrect_bulk',control=list(cex.axis=1));
}
