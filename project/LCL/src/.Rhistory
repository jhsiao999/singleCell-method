clus <- 10
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 9
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 8
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 7
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 6
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 5
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 4
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 3
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 2
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 1
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
Inf
Inf > Inf
-Inf > -Inf
setwd('/Users/kushal/Documents/singleCell-method/project/LCL/src')
library(readr)
library(data.table)
lcl_qc_data <- read_csv("../data/qc-lcl.csv");
lcl_annotations <- read.table('../data/annotation-lcl.txt',header=TRUE);
lcl_molecules <- t(data.frame(fread('../data/molecules-lcl.txt'), row.names = 1));
lcl_indices <- match(lcl_qc_data$ll_name, lcl_annotations$well)
lcl_molecules_refined <- lcl_molecules[lcl_indices,];
lcl_annotations_refined <- lcl_annotations[lcl_indices,];
library(CountClust)
library(maptpx)
lcl_molecules_refined <- handleNA(lcl_molecules_refined)$data;
nclus_vec <- 2:5;
if(!dir.exists("Structure")) dir.create("Structure")
if(!dir.exists("Structure/batch_uncorrected")) dir.create("Structure/batch_uncorrected")
bayesfac <- array(0,length(nclus_vec));
samp_metadata <- cbind.data.frame(1:96,lcl_qc_data$cell.num);
colnames(samp_metadata) = c("samples","no. of cells");
#for(num in 1:length(nclus_vec))
#{
#  if(!dir.exists(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))
#  obj <- StructureObj(lcl_molecules_refined,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]),partition=c('FALSE','TRUE'));
#}
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]),partition=c('FALSE','TRUE'));
}
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega,samp_metadata = samp_metadata, batch_lab = NULL, path=paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]),partition=c('FALSE','TRUE'));
}
well_id <- lcl_annotations_refined$well;
ids <- sapply(well_id, function(x) substring(x,2,3))
batch_lab <- array(0, length(ids))
batch_lab[which(ids=="01" | ids=="02" | ids=="03")]=1;
batch_lab[which(ids=="04" | ids=="05" | ids=="06")]=2;
batch_lab[which(ids=="07" | ids=="08" | ids=="09")]=3;
batch_lab[which(ids=="10" | ids=="11" | ids=="12")]=4;
samp_metadata <- cbind.data.frame(1:96);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
nclus_vec <- 2:5;
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega,samp_metadata = samp_metadata, tol=0.001, batch_lab = batch_lab, path=paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]),partition=c('FALSE','TRUE'));
}
samp_metadata <- cbind.data.frame(1:96);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
nclus_vec <- 2:5;
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega,samp_metadata = samp_metadata, batch_lab = batch_lab, path=paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]),partition=c('FALSE','TRUE'));
}
data <- lcl_molecules_refined
g <- 1
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
cpm_data <- log(data+0.5);
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
out
options(contrasts="contr.sum")
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
options(contrasts="constr.sum")
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
options("contr.sum")
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
out
options(contrasts="contr.sum")
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
?contr.sum
options(contrasts="contr.sum")
options(contrast="contr.sum")
options(contrasts="contr.sum")
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
options(contrast="contr.sum")
out <- lm(cpm_data[,g] ~  as.factor(batch_lab));
out
out$coefficients[1]
out$residuals
round(exp(out$coefficients[1] + out$residuals)-0.4)
install_github('kkdey/CountClust')
library(devtools)
install_github('kkdey/CountClust')
batch_corrected_lcl_molecules <- BatchCorrectedCounts(lcl_molecules_refined,batch_lab,use_parallel=TRUE)
library(parallel)
batch_corrected_lcl_molecules <- BatchCorrectedCounts(lcl_molecules_refined,batch_lab,use_parallel=TRUE)
dim(batch_corrected_lcl_molecules)
if(!dir.exists("Structure/batch_corrected")) dir.create("Structure/batch_corrected")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))
obj <- StructureObj(batch_corrected_lcl_molecules,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = batch_lab, path=paste0("Structure/batch_corrected/clus_",nclus_vec[num]));
}
num
if(!dir.exists(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))
obj <- StructureObj(batch_corrected_lcl_molecules,nclus_vec[num],samp_metadata = samp_metadata, tol=0.005, batch_lab = batch_lab, path=paste0("Structure/batch_corrected/clus_",nclus_vec[num]));
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_corrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega, samp_metadata = samp_metadata, tol=tol, batch_lab = batch_lab, path=paste0("Structure/batch_corrected/clus_",nclus_vec[num]),control=controlinput,partition = c("FALSE"));
}
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_corrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega, samp_metadata = samp_metadata, batch_lab = batch_lab, path=paste0("Structure/batch_corrected/clus_",nclus_vec[num]),control=controlinput,partition = c("FALSE"));
}
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_corrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega, samp_metadata = samp_metadata, batch_lab = batch_lab, path=paste0("Structure/batch_corrected/clus_",nclus_vec[num]),partition = c("FALSE"));
}
lcl_qc_data
lcl_single_cells <- lcl_molecules_refined[which(lcl_qc_data$cell.num==1),];
dim(lcl_single_cells)
batch_lab_single_cells <- batch_lab[which(lcl_qc_data$cell.num==1)];
length(batch_lab_single_cells)
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
cell_cycle_genes
reads_lcl <- data.frame(fread('../data/reads_lcl.txt'));
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'));
dim(reads_lcl)
reads_lcl <- t(data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- t(data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE));
dim(reads_lcl)
reads_lcl <- reads_lcl[lcl_indices,];
dim(reads_lcl)
reads_lcl_single <- reads_lcl[which(lcl_qc_data$cell.num==1),];
dim(reads_lcl_single)
reads_single <- reads_lcl_single
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
library("dplyr")
library("ggplot2")
library("edgeR")
library("gplots")
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
reads_single <- t(reads_lcl_single)
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
reads_single <- reads_lcl_single
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
cell_cycle_genes_list
cell_cycle_genes_list[[1]]
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
cell_cycle_genes_list[[1]]
cell_cycle_genes_list[[2]]
cell_cycle_genes_list[[3]]
cell_cycle_genes_list[[4]]
cell_cycle_genes_list
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
reads_single[1:5,1:5]
reads_single <- as.matrix(reads_lcl_single)
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
cell_cycle_genes_list[1]
xx <- cell_cycle_genes_list[1]
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
dim(reads_single_phase)
rownames(reads_single)
reads_single_phase <- reads_single[colnames(reads_single) %in% unlist(xx) ,]
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[colnames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[colnames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- reads_lcl[,lcl_indices];
reads_lcl_single <- reads_lcl[,which(lcl_qc_data$cell.num==1)];
reads_single <- as.matrix(reads_lcl_single)
dim(reads_single)
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
ans
ans_normed <- flexible_normalization(ans,by_row=FALSE)
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase
samp_metadata <- cbind.data.frame(assign_cell_phase);
colnames(samp_metadata) = c("cell_phase");
batch_lab <- batch_lab
nclus_vec <- 2:5;
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]))
omega <- as.matrix(read.table(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num],"/omega_mat.txt")));
obj <- StructureObj_omega(omega,samp_metadata = samp_metadata, batch_lab = batch_lab, path=paste0("Structure/batch_uncorrected/clus_",nclus_vec[num]),partition=c('FALSE','TRUE'));
}
length(assign_cell_phase)
assign_cell_phase
assign_cell_phase[,2]
as.character(assign_cell_phase)
as.factor(assign_cell_phase)
assign_cell_phase
as.vector(assign_cell_phase)
as.vector(as.matrix(assign_cell_phase))
omega <- as.matrix(read.table(paste0("Structure/batch_uncorrected/clus_",nclus_vec[num],"/omega_mat.txt")));
dim(omega)
dim(lcl_single_cells)
samp_metadata <- cbind.data.frame(as.vector(as.matrix(assign_cell_phase)));
colnames(samp_metadata) = c("cell_phase");
batch_lab <- batch_lab
if(!dir.exists("Structure/batch_uncorrected_single")) dir.create("Structure/batch_uncorrected_single")
nclus_vec <- 2:5;
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj(lcl_single_cells,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = batch_lab, path=paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]),partition=c('TRUE'));
}
batch_vec
batch_lab
nclus_vec <- 2:5;
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj(lcl_single_cells,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = batch_lab_single_cells, path=paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]),partition=c('TRUE'));
}
if(!dir.exists(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]))
obj <- StructureObj(lcl_single_cells,nclus_vec[num],samp_metadata = samp_metadata, tol=0.005, batch_lab = batch_lab_single_cells, path=paste0("Structure/batch_uncorrected_single/clus_",nclus_vec[num]),partition=c('TRUE'));
if(!dir.exists("Structure/batch_corrected_single")) dir.create("Structure/batch_corrected_single")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]))
obj <- StructureObj(batch_corrected_lcl_single,nclus_vec[num],samp_metadata = samp_metadata, tol=0.005, batch_lab = batch_lab_single_cells, path=paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]),partition=c('TRUE'));
}
batch_corrected_lcl_single <- BatchCorrectedCounts(lcl_single_cells,batch_lab_single_cells,use_parallel=TRUE)
if(!dir.exists("Structure/batch_corrected_single")) dir.create("Structure/batch_corrected_single")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]))
obj <- StructureObj(batch_corrected_lcl_single,nclus_vec[num],samp_metadata = samp_metadata, tol=0.005, batch_lab = batch_lab_single_cells, path=paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]),partition=c('TRUE'));
}
if(!dir.exists("Structure/batch_corrected_single")) dir.create("Structure/batch_corrected_single")
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]))) dir.create(paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]))
obj <- StructureObj(batch_corrected_lcl_single,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = batch_lab_single_cells, path=paste0("Structure/batch_corrected_single/clus_",nclus_vec[num]),partition=c('TRUE'));
}
