<<<<<<< HEAD
=======
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase));
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S", "S", "G2.M", "M", "M.G1"))
counts_data <- t(molecules_single_cell_cycle)
cpm_data <- voom(counts_data)$E
individual_id <- sapply(1:length(rownames(cpm_data)),
function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][1])
batch_id <- sapply(1:length(rownames(cpm_data)),
function(x) strsplit(rownames(cpm_data)[x],"[.]")[[1]][2])
batch_removed_cpm <- matrix(0,dim(cpm_data)[1], dim(cpm_data)[2])
dim(counts_data)
counts_data <- t(molecules_single_cell_cycle)
cpm_data <- voom(counts_data)$E
individual_id <- sapply(1:length(rownames(cpm_data)), function(x)
strsplit(rownames(cpm_data)[x],"[.]")[[1]][1])
batch_id <- sapply(1:length(rownames(cpm_data)), function(x)
strsplit(rownames(cpm_data)[x],"[.]")[[1]][2]);
batch_removed_cpm <- matrix(0,dim(cpm_data)[1], dim(cpm_data)[2]);
for(g in 1:dim(cpm_data)[2])
{
res <- as.numeric(lm(cpm_data[,g] ~ individual_id+batch_id)$residuals);
batch_removed_cpm[,g] <- res;
}
col <- c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)),
rgb(1,seq(1,0,length=15),seq(1,0,length=15)))
dim(counts_data)
library(gplots)
par( mar = c(4,4,4,4) )
cor_batch <- cor(t(batch_removed_cpm));
heatmap.2(cor_batch,scale="none", trace="none",
labRow = cell_phase_vector,labCol = cell_phase_vector,
breaks = c(seq(-1,0,0.07), seq(0,0.5,0.05), seq(0.6,1,0.1)),
col = col, distfun=function(x) dist(x,method="euclidean"),
hclustfun=function(x) hclust(x,method="average"))
out <- kmeans(batch_removed_cpm,5);
xtabs(~out$cluster+cell_phase_vector)
counts_data[1:10,1:10]
counts_data[1:10,1:3]
batch_corrected_counts <- BatchCorrectedCounts(counts_data,batch_id);
setwd('/Users/kushal/Documents/singleCell-method/project/R/')
library(SQUAREM)
library(optimx)
library(gtools)
library(parallel)
library(lineprof)
library(lme4)
library(permute)
library(BioPhysConnectoR)
source('poisson_loglik.R')
source('simplex_functions.R')
source('estimation_poisson_batch.R')
source('simulate_counts_poisson.R')
source('example_simulation.R');
source('poisson_topic_loglink.R')
source('example_simulation.R');
out <- Poisson_topic.loglink(counts,n_clus=4,lab_batch,use_squarem = FALSE)
docweights=out$omega;
perm_set=rbind(1:K,allPerms(1:K));
diff=array(0,dim(perm_set)[1]);
for (p in 1:dim(perm_set)[1])
{
temp=docweights[,perm_set[p,]];
diff[p]=fnorm(temp,omega_true);
}
p_star=which(diff==min(diff));
docweights=docweights[,perm_set[p_star,]];
barplot(t(docweights),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",k),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
docweights=out$omega;
K <- dim(docweights)[2]
perm_set=rbind(1:K,allPerms(1:K));
diff=array(0,dim(perm_set)[1]);
for (p in 1:dim(perm_set)[1])
{
temp=docweights[,perm_set[p,]];
diff[p]=fnorm(temp,omega_true);
}
p_star=which(diff==min(diff));
docweights=docweights[,perm_set[p_star,]];
barplot(t(docweights),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",k),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
barplot(t(docweights),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",K),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
getwd()
setwd("/Users/kushal/Documents/singleCell-method/project/analysis/")
source('../R/poisson_loglik.R')
source('../R/simplex_functions.R')
source('../R/estimation_poisson_batch.R')
source('../R/poisson_topic_loglink.R')
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,individual.batch.id,use_squarem = FALSE)
})
dim(counts_data)
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,individual.batch.id,use_squarem = FALSE,max_iter = 200)
})
individual.batch.id
factor(i)ndividual.batch.id
factor(individual.batch.id)
as.numeric(factor(individual.batch.id))
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(individual.batch.id),use_squarem = FALSE,max_iter = 200)
})
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,as.factor(as.numeric(individual.batch.id)),use_squarem = FALSE,max_iter = 200)
})
as.factor(as.numeric(individual.batch.id))
as.numeric(individual.batch.id)
as.numeric(as.factor(individual.batch.id))
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 200)
})
names(Topic_clus_list) <- paste0("clust_",nclus_vec)
save(Topic_clus_list, file = "../../project/rdas/poiss_randbatch_cellcycle.rda");
if(file.exists("../../project/rdas/poiss_randbatch_cellcycle.rda"))
{
poiss_batch <- get(load("../../project/rdas/topic_fit_ipsc_batchcorrect_cellcycle.rda"));
} else {
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 200)
})
names(Topic_clus_list) <- paste0("clust_",nclus_vec)
save(Topic_clus_list, file = "../../project/rdas/poiss_randbatch_cellcycle.rda");
poiss_batch <- get(load("../../project/rdas/topic_fit_ipsc_batchcorrect_cellcycle.rda"));
}
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(poiss_batch[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_id,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct="../figures/poiss_batch_cellcycle",control=list(cex.axis=1));
}
if(!dir.exists("../figures/poiss_batch_cellcycle")) dir.create("../figures/poiss_batch_cellcycle")
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(poiss_batch[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_id,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct="../figures/poiss_batch_cellcycle",control=list(cex.axis=1));
}
if(file.exists("../../project/rdas/poiss_randbatch_cellcycle.rda"))
{
poiss_batch <- get(load("../../project/rdas/poiss_randbatch_cellcycle.rda"));
} else {
nclus_vec <- 2:4
Topic_clus_list <- lapply(nclus_vec, function(per_clust) {
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 200)
})
names(Topic_clus_list) <- paste0("clust_",nclus_vec)
save(Topic_clus_list, file = "../../project/rdas/poiss_randbatch_cellcycle.rda");
poiss_batch <- get(load("../../project/rdas/poiss_randbatch_cellcycle.rda"));
}
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(poiss_batch[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_id,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct="../figures/poiss_batch_cellcycle",control=list(cex.axis=1));
}
num <- 1
poiss_batch[[num]]$omega
dim(counts_data)
n_samples <- 3
n_samples <- dim(counts_data)[1]
n_clus <- 3
batch_lab_iPSC
batch_lab
lab_batch <- as.numeric(as.factor(individual.batch.id))
B <- max(lab_batch);
B
n_genes <- dim(counts_data)[2]
alpha=matrix(0,n_clus,n_genes);
beta=matrix(0,B,n_genes);
lab_batch_fac <- as.factor(lab_batch);
g <- 1
glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30)))
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
prior_scale_omega=3
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
omega0 <- omega_initial
g <- 1
glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30)))
dim(omega0)
counts <- counts_data
glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30)))
system.time(out_parallel <- mclapply(1:n_genes,
function(g) glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30))),
mc.set.seed = TRUE,
mc.cores = detectCores()));
out_parallel[[1]]
out_parallel[[2]]
out_parallel[[4]]
out_parallel[[100]]
alpha_out <- do.call(cbind,mclapply(1:n_genes, function(g) as.numeric(fixef(out_parallel[[g]]))));
beta_out <-  do.call(cbind,mclapply(1:n_genes, function(g) as.numeric(as.matrix(ranef(out_parallel[[g]])$lab_batch_fac))))
alpha_out
beta_out
system.time(omega_out <- do.call(rbind,mclapply(1:n_samples,
FUN=function(n)
{
res <- optim(reverse_transform(omega0[n,]),function(v) omega_loglik_poisson_onesample(transform(v),counts[n,],alpha_out,beta_out,lab_batch[n]))
#return(transform(as.numeric(res[,1:(n_clus-1)])))
return(transform(res$par))
},
mc.set.seed = TRUE,
mc.cores = detectCores())));
rowSums(omega_out)
rowSums(omega_out)==rep(1,dim(omega_out)[1])
rowSums(omega_out)==rep(1,dim(omega_out)[2])
rowSums(omega_out)
omega_out
barplot(omega_out)
barplot(t(omega_out))
barplot(t(omega_out),col=2:4)
barplot(omega_out,col=2:4)
barplot(t(omega_out),col=2:4,axisnames=F,space=0,border=NA,main=paste("No. of clusters=",K),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
per_clust <- 2
dim(counts_data)
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 200)
out$omega[1,]
source('../R/poisson_loglik.R')
source('../R/simplex_functions.R')
source('../R/estimation_poisson_batch.R')
source('../R/poisson_topic_loglink.R')
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 20)
out$omega[1,]
g <- 1
counts[,g] ~ omega0 + lab_batch_fac -1, family=poisson())
glm (counts[,g] ~ omega0 + lab_batch_fac -1, family=poisson())
glm (counts[,g] ~ omega0 -1 + lab_batch_fac , family=poisson())
glm (counts[,g] ~ lab_batch_fac + omega0-1 , family=poisson())
glm (counts[,g] ~ omega0+lab_batch_fac-1 , family=poisson())
dim(omega0)
g <- 2
glm (counts[,g] ~ omega0+lab_batch_fac-1 , family=poisson())
glm (counts[,g] ~ omega0+lab_batch_fac-1-1 , family=poisson())
glm (counts[,g] ~ omega0+lab_batch_fac , family=poisson())
glm (counts[,g] ~ omega0+lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.sum"))
glm (counts[,g] ~ omega0+lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.sum"))
lab_batch_fac
glm (counts[,g] ~ omega0+lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt"))
glm (counts[,g] ~ lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt"))
glm (counts[,g] ~ omega[,1] + lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt"))
glm (counts[,g] ~ omega0[,1] + lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt"))
glm (counts[,g] ~ omega0[,1:2] + lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt"))
glm (counts[,g] ~ omega0[,1:3] + lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt"))
omega0[,3]
source('../R/poisson_loglik.R')
source('../R/simplex_functions.R')
source('../R/estimation_poisson_batch.R')
source('../R/poisson_topic_loglink.R')
per_clust <- 2
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 20)
out$omega[1,]
reverse_transform(c(1,0,0))
out <- Poisson_topic.loglink(counts_data,per_clust,as.numeric(as.factor(individual.batch.id)),use_squarem = FALSE,max_iter = 20)
out$omega[,1]
dim(counts_data)
counts_data[1:10,1:10]
as.matrix(counts_data)[1:10,1:10]
counts <- counts_data
nc_clus <- 2
lab_batch <- individual.batch.id
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
lab_batch
lab_batch <- as.numeric(as.factor(individual.batch.id)),
lab_batch <- as.numeric(as.factor(individual.batch.id))
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
param_vec <- param_vec_in
iter <- 1
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec <- param_vec_in
param_vec
param_vec[1]
counts=matrix(counts_vec,n_samples,n_genes);
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
dim(omega0)
nc_clus
n_samples
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
dim(omega0)
n_clus
n_clus <- 2
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
param_vec <- param_vec_in
counts=matrix(counts_vec,n_samples,n_genes);
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
dim(omega0)
B <- max(lab_batch);
B
alpha=matrix(0,n_clus,n_genes);
beta=matrix(0,B,n_genes);
lab_batch_fac <- as.factor(lab_batch);
system.time(out_parallel <- mclapply(1:n_genes,
function(g) glm (counts[,g] ~ omega0 + lab_batch_fac-1 , family=poisson(), contrasts = list(lab_batch_fac = "contr.trt")),
mc.set.seed = TRUE,
mc.cores = detectCores()));
out_parallel[[1]]
system.time(out_parallel <- mclapply(1:n_genes,
function(g) glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30))),
mc.set.seed = TRUE,
mc.cores = detectCores()));
alpha_out <- do.call(cbind,mclapply(1:n_genes, function(g) as.numeric(fixef(out_parallel[[g]]))));
beta_out <-  do.call(cbind,mclapply(1:n_genes, function(g) as.numeric(as.matrix(ranef(out_parallel[[g]])$lab_batch_fac))))
alpha_out
beta_out
system.time(omega_out <- do.call(rbind,mclapply(1:n_samples,
FUN=function(n)
{
res <- optim(reverse_transform(omega0[n,]),function(v) omega_loglik_poisson_onesample(transform(v),counts[n,],alpha_out,beta_out,lab_batch[n]))
#return(transform(as.numeric(res[,1:(n_clus-1)])))
return(transform(res$par))
},
mc.set.seed = TRUE,
mc.cores = detectCores())));
omega_out
param_vec_out=c(as.vector(omega_out),as.vector(alpha_out),as.vector(beta_out));
param_vec_out
which(is.na(param_vec_out))
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
param_vec <- param_vec_in
source('~/Documents/singleCell-method/project/R/estimation_poisson_batch.R')
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec[1]
param_vec[2]
param_vec[200]
param_vec[6000]
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
options(warn=-1)
param_vec <- param_vec_in
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
counts=matrix(counts_vec,n_samples,n_genes);
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
B <- max(lab_batch);
rowsums(omega0)
rowSums(omega0)
alpha=matrix(0,n_clus,n_genes);
beta=matrix(0,B,n_genes);
lab_batch_fac <- as.factor(lab_batch);
g <- 1
glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30)))
g <- 2
glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30)))
system.time(out_parallel <- mclapply(1:n_genes,
function(g) glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30))),
mc.set.seed = TRUE,
mc.cores = detectCores()));
alpha_out <- do.call(cbind,mclapply(1:n_genes, function(g) as.numeric(fixef(out_parallel[[g]]))));
alpha_out
alpha_out[1]
alpha_out[2]
alpha_out[3]
dim(alpha)
system.time(out_parallel <- lapply(1:n_genes,
function(g) glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=30)))
));
system.time(out_parallel <- lapply(1:n_genes,
function(g) glmer (counts[,g] ~ omega0 + (1|lab_batch_fac)-1, family=poisson(),control=glmerControl(optCtrl=list(maxfun=300)))
));
source('../R/poisson_loglik.R')
source('../R/simplex_functions.R')
source('../R/estimation_poisson_batch.R')
source('../R/poisson_topic_loglink.R')
per_clust <- 2
out <- Poisson_topic.loglink(as.matrix(counts_data),per_clust,as.numeric(as.factor(batch_id)),use_squarem = FALSE,max_iter = 20)
out <- Poisson_topic.loglink(as.matrix(counts_data),per_clust,as.numeric(as.factor(batch_id)),use_squarem = FALSE,max_iter = 20)
dim(counts_data)
dim(counts)
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
param_vec <- param_vec_in
iter <- 1
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
lab_batch
lab_batch <- batch_id
batch_id
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
max(lab_batch)
as.numeric(lab_batch)
lab_batch <- as.numeric(batch_id)
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
param_vec <- param_vec_in
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
counts=matrix(counts_vec,n_samples,n_genes);
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
B <- max(lab_batch);
##############  Estimating the alpha and beta ####################
alpha=matrix(0,n_clus,n_genes);
beta=matrix(0,B,n_genes);
lab_batch_fac <- as.factor(lab_batch);
lab_batch_fac
g <- 1
glm (counts[,g] ~ omega0 + lab_batch_fac-1, family=poisson())
length(counts[,1])
dim(omega0)
length(lab_batch_fac)
glm (counts[,g] ~ omega0 + lab_batch_fac-1, family=poisson())
glm (counts[,g] ~ omega0 + as.factor(lab_batch_fac)-1, family=poisson())
counts[,1]
as.factor(lab_batch_fac)
omega0
omega_initial
param_vec
n_samples <- dim(counts)[1];
n_genes <- dim(counts)[2];
omega_initial <- matrix(rdirichlet(n_samples,rep(prior_scale_omega/n_clus,n_clus)),nrow=n_samples);
alpha_initial <- matrix(0,nrow=n_clus, ncol=n_genes);
beta_initial <- matrix(0, nrow=max(lab_batch),ncol=n_genes);
param_vec_in <- c(as.vector(omega_initial), as.vector(alpha_initial), as.vector(beta_initial));
counts_vec <- as.vector(counts);
param_vec_in
param_vec <- param_vec_in
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec <- param_vec_in
param_vec
counts=matrix(counts_vec,n_samples,n_genes);
omega0=matrix(param_vec[1:(n_samples*n_clus)],n_samples,n_clus);
omega0
omega_initial
B <- max(lab_batch);
alpha=matrix(0,n_clus,n_genes);
beta=matrix(0,B,n_genes);
lab_batch_fac <- as.factor(lab_batch);
g <- 1
glm (counts[,g] ~ omega0 + as.factor(lab_batch_fac)-1, family=poisson())
glm (counts[,g] ~ omega0 + as.factor(lab_batch_fac)-1, family=poisson(),contrasts = list(lab_batch_fac = "contr.sum"))
source('~/Documents/singleCell-method/project/R/estimation_poisson_batch.R')
param_vec <- param_vec_in
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
source('~/Documents/singleCell-method/project/R/estimation_poisson_batch.R')
param_vec <- param_vec_in
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
param_vec
param_vec <- update_param_poisson_randbatch(param_vec,counts_vec,n_samples,n_genes,n_clus,lab_batch);
>>>>>>> a225dc241cbc36716d8da424c6d1885a81cb107b
