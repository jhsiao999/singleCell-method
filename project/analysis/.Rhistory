return(v)
}
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
sigma <- array(0,G);
amp <- array(0,G); phi <- array(0,G);
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
library(parallel)
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
lmfit_list[[1]]
lmfit_list[[1]]$out_amp
amp <- unlist(lapply(lmfit_list, function(n) return(lmfit_list[[n]]$out_amp)));
amp <- unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp)));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
phi <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_phi))));
amp[1]
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
}
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
amp[1]
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycler)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
setwd("/Users/kushal/Documents/singleCell-method/project/data/Botstein_data/")
data <- data.frame(fread("botstein_cdc.txt"));
library(data.table)
data <- data.frame(fread("botstein_cdc.txt"));
dim(data)
data <- read.table("botstein_cdc.txt"));
data <- read.table("botstein_cdc.txt");
data <- read.table("botstein_cdc.txt", skip=2);
data <- read.table("botstein_cdc.txt", skip=3);
data <- read.table("botstein_cdc.txt", skip=1);
data <- read.table("botstein_cdc.txt", skip=4);
data <- read.table("botstein_cdc.txt", skip=2, fill=TRUE);
dim(data)
data[1,]
data[2,]
setwd("/Users/kushal/Documents/singleCell-method/project/analysis/")
library(data.table)
data <- read.csv("../Oscope data/GSE64016_H1andFUCCI_normalized_EC.csv")
data <- read.csv("../data/Oscope data/GSE64016_H1andFUCCI_normalized_EC.csv")
dim(data)
data[1:5,1:5]
colnames(data)
sapply(colnames(data), function(x) strsplit(x,"_")[[1]][1)]
sapply(colnames(data), function(x) strsplit(x,"_")[[1]][1])
which(cell_phases != "H1")
cell_phases <- sapply(colnames(data), function(x) strsplit(x,"_")[[1]][1]);
which(cell_phases != "H1")
cell_data <- data[,which(cell_phases != "H1")];
dim(data)
dim(cell_data)
cycle_data <- t(cell_data);
dim(cycle_data)
rownames(cycle_data)
colnames(cycle_data)
cycle_data[1,]
cycle_data[2,]
data <- read.csv("../data/Oscope data/GSE64016_H1andFUCCI_normalized_EC.csv")
cell_phases <- sapply(colnames(data), function(x) strsplit(x,"_")[[1]][1]);
cell_data <- as.matrix(data[-1,which(cell_phases != "H1")]);
genes <- data[1,];
cycle_data <- t(cell_data);
genes
data[,1]
data[1:5,1:5]
data <- read.csv("../data/Oscope data/GSE64016_H1andFUCCI_normalized_EC.csv")
gene_names <- data[,1];
data <- data[,-1];
cell_phases <- sapply(colnames(data), function(x) strsplit(x,"_")[[1]][1]);
cell_data <- as.matrix(data[-1,which(cell_phases != "H1")]);
cycle_data <- t(cell_data);
dim(cycle_data)
cycle_data[1:5,1:5]
cycle_data_norm <- apply(cycle_data,2,function(x)  return (x-mean(x))/sd(x))
dim(cycle_data_norm)
cycle_data_norm[1:5,1:5]
library(cellcycleR)
celltime_levels <- 100;
out <- cell_ordering_phase(cycle_data_norm, celltime_levels = 100, num_iter=50)
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=50)
celltime_levels <- 100;
library(parallel)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=50)
which(colSums(cycle_data_norm)==0)
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=50)
save(out,"../rdas/Botstein_cell_cycle.rdata");
save(out,file="../rdas/Botstein_cell_cycle.rdata");
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times,
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times)), lwd=2)
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times,
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times)), lwd=2)
cell_times <- out$cell_times;
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times,
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times)), lwd=2)
cell_phases <- cell_phases[which(cell_phases != "H1")];
cell_phases
table(cell_phases)
library(vioplot)
vioplot(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")],
names=c("G1","S","G2"),
col="red")
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out2$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes), col="red", main="Density plot of the amplitudes")
amp_genes
plot(density(sd_genes), col="red", main="Density plot of the standard deviation")
which.max(sd_genes)
which.max(amp_genes)
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the standard deviation")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR)
snr_high_indices <- which(SNR > 10);
snr_high_indices
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
out2 <- cell_ordering_class(cycle_data_norm_sinusoidal, celltime_levels = 100, num_iter=100)
cell_times <- out2$cell_times;
library(vioplot)
vioplot(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")],
names=c("G1","S","G2"),
col="red")
snr_high_indices <- which(SNR > 2);
snr_high_indices
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
out2 <- cell_ordering_class(cycle_data_norm_sinusoidal, celltime_levels = 100, num_iter=100)
cell_times <- out2$cell_times;
library(vioplot)
vioplot(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")],
names=c("G1","S","G2"),
col="red")
snr_high_indices <- which(SNR > 1);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
out2 <- cell_ordering_class(cycle_data_norm_sinusoidal, celltime_levels = 100, num_iter=100)
cell_times <- out2$cell_times;
library(vioplot)
vioplot(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")],
names=c("G1","S","G2"),
col="red")
amp_genes <- out2$amp;
sd_genes <- out2$sigma;
phi_genes <- out2$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
cell_times <- out$cell_times;
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times,
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times)), lwd=2)
cell_phases <- cell_phases[which(cell_phases != "H1")];
library(vioplot)
vioplot(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")],
names=c("G1","S","G2"),
col="red")
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
(cell_times[which(cell_phases=="G1")]+2)%%6
vioplot((cell_times[which(cell_phases=="G1")]+2)%%6,
(cell_times[which(cell_phases=="S")]+2)%%6,
(cell_times[which(cell_phases=="G2")]+2)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]+0)%%6,
(cell_times[which(cell_phases=="S")]+0)%%6,
(cell_times[which(cell_phases=="G2")]+0)%%6,
names=c("G1","S","G2"),
col="red")
library(vioplot)
vioplot((cell_times[which(cell_phases=="G1")]-2)%%6,
(cell_times[which(cell_phases=="S")]-2)%%6,
(cell_times[which(cell_phases=="G2")]-2)%%6,
names=c("G1","S","G2"),
col="red")
library(vioplot)
vioplot((cell_times[which(cell_phases=="G1")]-1)%%6,
(cell_times[which(cell_phases=="S")]-1)%%6,
(cell_times[which(cell_phases=="G2")]-1)%%6,
names=c("G1","S","G2"),
col="red")
boxplot((cell_times[which(cell_phases=="G1")]-1)%%6,
(cell_times[which(cell_phases=="S")]-1)%%6,
(cell_times[which(cell_phases=="G2")]-1)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-1.5)%%6,
(cell_times[which(cell_phases=="S")]-1.5)%%6,
(cell_times[which(cell_phases=="G2")]-1.5)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-4.5)%%6,
(cell_times[which(cell_phases=="S")]-4.5)%%6,
(cell_times[which(cell_phases=="G2")]-4.5)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-5.5)%%6,
(cell_times[which(cell_phases=="S")]-5.5)%%6,
(cell_times[which(cell_phases=="G2")]-5.5)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-5)%%6,
(cell_times[which(cell_phases=="S")]-5)%%6,
(cell_times[which(cell_phases=="G2")]-5)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-0.5)%%6,
(cell_times[which(cell_phases=="S")]-0.5)%%6,
(cell_times[which(cell_phases=="G2")]-0.5)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-1)%%6,
(cell_times[which(cell_phases=="S")]-1)%%6,
(cell_times[which(cell_phases=="G2")]-1)%%6,
names=c("G1","S","G2"),
col="red")
vioplot((cell_times[which(cell_phases=="G1")]-1.5)%%6,
(cell_times[which(cell_phases=="S")]-1.5)%%6,
(cell_times[which(cell_phases=="G2")]-1.5)%%6,
names=c("G1","S","G2"),
col="red")
(cell_times[which(cell_phases=="G1")]-1.5)
cell_times[which(cell_phases=="G1")]
min(cell_times[which(cell_phases=="G1")])
max(cell_times[which(cell_phases=="G1")])
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("blue",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="S")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("blue",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="S")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("blue",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
length(which(cell_phases=="G2"))
length(which(cell_phases=="S"))
length(which(cell_phases=="G1"))
cell_times[which(cell_phases=="G1")]
cell_times[which(cell_phases=="G2")]
cell_times <- out2$cell_times;
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("blue",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("blue",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="G2"))))
c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="G2"))))
cell_times_ordered
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="S")))),lwd=2)
cell_times <- out2$cell_times;
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="S")))),lwd=2)
cell_times[which(cell_phases=="G1")]
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_times[which(cell_phases=="G1")
)
cell_times[which(cell_phases=="G1")]
cell_times[which(cell_phases=="G2")]
cell_times_ordered <- c(cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_times <- out$cell_times;
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times,
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times)), lwd=2)
cell_phases <- cell_phases[which(cell_phases != "H1")];
library(vioplot)
vioplot((cell_times[which(cell_phases=="G1")]-1.5)%%6,
(cell_times[which(cell_phases=="S")]-1.5)%%6,
(cell_times[which(cell_phases=="G2")]-1.5)%%6,
names=c("G1","S","G2"),
col="red")
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("blue",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="S")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="S")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="G1")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="G1"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_times_ordered <- c(cell_times[which(cell_phases=="S")],
cell_times[which(cell_phases=="G2")]);
radial.plot(lengths=1:length(cell_times_ordered),radial.pos=cell_times_ordered,
line.col=c(rep("red",length(which(cell_phases=="S"))),
rep("green",length(which(cell_phases=="G2")))),lwd=2)
cell_order_full <- cell_ordering_full(out$signal_intensity, dim(cycle_data)[2])
length(cell_order_full)
top_genes <- which(SNR > 30);
top_genes
library(qtlcharts)
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
top_genes <- which(SNR > 20);
library(qtlcharts)
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
iplotCurves(t(cycle_data_norm[c(which(cell_phases=="G1"),which(cell_phases=="S"), which(cell_phases=="G2")),top_genes]))
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
top_genes <- which(SNR > 10);
library(qtlcharts)
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
ccell_times
cell_times
cell_phases
top_genes <- which(SNR > 5);
library(qtlcharts)
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
iplotCurves(t(cycle_data_norm[c(which(cell_phases=="G1"),which(cell_phases=="S"), which(cell_phases=="G2")),top_genes]))
top_genes <- which(SNR > 5);
library(qtlcharts)
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
top_genes <- which(SNR > 0.5);
library(qtlcharts)
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
