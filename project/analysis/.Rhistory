phenoData = phenoData(eset_rna_ribo),
experimentData = experimentData(eset_rna_ribo))
featureData(eset_rna_ribo) = featureData(eset_rna_ribo)
return(interact2way(eset_rna_ribo) )
})
permuate_labels[[1]]
permute_labels <- lapply(1:n_permute, function(per_null){
data.frame(label1 = sample(1:n_genes, replace = FALSE),
label2 = sample(1:n_genes, replace = FALSE) )
})
null_rna_ribo <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_rna_ribo)[ , eset_rna_ribo$seqData == "rna"]
emat2 <- exprs(eset_rna_ribo)[permute_labels[[each_null]][,1],
eset_rna_ribo$seqData == "ribo"]
emat_per_null <- cbind(emat1, emat2)
eset_rna_ribo_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_rna_ribo),
experimentData = experimentData(eset_rna_ribo))
featureData(eset_rna_ribo) = featureData(eset_rna_ribo)
return(interact2way(eset_rna_ribo) )
})
load(file.path(rdadir, "rnapro.rda"))
eset_full <- eSetRRP.log2.Qmed
eset_rna_pro <- eset_full[ ,eset_full$seqData != "protein"
& eset_full$species != "rhesus"]
eset_full$seqData
load(file.path(rdadir, "ribopro.rda"))
eset_full <- eSetRRP.log2.Qmed
eset_rna_pro <- eset_full[ ,eset_full$seqData != "rna"
& eset_full$species != "rhesus"]
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
datatypes <- c("rna", "protein")
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
order_datatypes
setdiff(order_datatypes, c(1:3) )
order_datatypes
setdiff(c(1:2), c(1:3))
?setdiff
setdiff(c(1:3), c(1:2))
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
exclude_datatypes
eset_full <- eSetRRP.log2.Qmed
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
permute_interact <- function(eset_full, datatypes) {
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]],
eset_sub$seqData == datastypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,2],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_sub) = featureData(eset_sub)
return(interact2way(eset_sub) )
})
}
permute_interact <- function(eset_full, datatypes, permute_labels) {
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]],
eset_sub$seqData == datastypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,2],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_sub) = featureData(eset_sub)
return(interact2way(eset_sub) )
})
}
permute_labels[1]
n_permute <- 10
n_genes <- dim(exprs(eSetRRP.log2))[1]
permute_labels <- lapply(1:n_permute, function(per_null){
data.frame(rna = sample(1:n_genes, replace = FALSE),
ribo = sample(1:n_genes, replace = FALSE),
pro = sample(1:n_genes, replace = FALSE))
})
permute_labels[1:2]
str(permute_labels[1:2])
res_null_rna_ribo <- permute_interact(eset_full = eSetRRP.RP.Q.log2,
datatypes = c("rna", "ribo"),
permute_labels = permute_labels[1])
eset_full = eSetRRP.RP.Q.log2
datatypes = c("rna", "ribo")
permute_labels = permute_labels[1]
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
eset_sub
datatypes
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,2],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_sub) = featureData(eset_sub)
return(interact2way(eset_sub) )
})
order_datatypes[2]
permute_labels[1][,1]
str(permute_labels[1])
str(permute_labels[[1]])
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_sub) = featureData(eset_sub)
return(interact2way(eset_sub) )
})
sessionInfo()
require(qvalue)
sessionInfo()
tt <- qvalue(res.riborna$int.pval)
sum(tt$qvalues < .01)
str(tt)
sum(res.riborna$int.qval < .01)
sum(qvalue(res.riborna$int.pval)$qvalues < .01)
remove.packages("qvalue")
install.packages("/Users/joycehsiao/Downloads/qvalue_1.38.0.tar.gz",
repos = NULL, type="source")
require(qvalue)
sessionInfo()
permute_labels[1]
getwd()
library(Biobase)
## Set working directories
dir <- "../"
figdir <- file.path(dir,"figures")
rdadir <- file.path(dir,"rdas")
datadir <- file.path(dir, "data")
## Use broman package for colors
require(broman)
crayon <- brocolors("crayons")
## Load customized packages
require(devtools)
require(Humanzee)
load(file.path(rdadir, "TE_full.rda"))
ngenes <- dim(res.riborna_full_human_chimp)[1]
na_mat <- data.frame(total_genes = ngenes,
human_chimp_na = sum(is.na(res.riborna_full_human_chimp$int.pval)),
human_rhesus_na = sum(is.na(res.riborna_full_human_rhesus$int.pval)),
chimp_rhesus_na = sum(is.na(res.riborna_full_chimp_rhesus$int.pval)) )
ii_exclude_genes <- is.na(res.riborna_full_human_rhesus$int.pval)
exprs(eSetRPKM.Q.log2)[which(ii_exclude_genes), ]
sig_genes <-
data.frame(total_genes = ngenes - sum(ii_exclude_genes),
human_chimp = sum(res.riborna_full_human_chimp$int.qval[
which(!ii_exclude_genes)] < .01, na.rm = TRUE),
human_rhesus = sum(res.riborna_full_human_rhesus$int.qval[
which(!ii_exclude_genes)] < .01, na.rm = TRUE),
chimp_rhesus = sum(res.riborna_full_chimp_rhesus$int.qval[
which(!ii_exclude_genes)] < .01, na.rm = TRUE) )
par(mfrow = c(2,2))
plot_list <- list(human_chimp = res.riborna_full_human_chimp$int.pval,
chimp_rhesus = res.riborna_full_chimp_rhesus$int.pval,
human_rhesus = res.riborna_full_human_rhesus$int.pval)
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "p-value", main = names(plot_list)[i] )
}
par(mfrow = c(2,2))
plot_list <- list(human_chimp = res.riborna_full_human_chimp$int.qval,
chimp_rhesus = res.riborna_full_chimp_rhesus$int.qval,
human_rhesus = res.riborna_full_human_rhesus$int.qval)
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "p-value", main = names(plot_list)[i] )
}
par(mfrow = c(2,2))
plot_list <- list(human_chimp = res.riborna_full_human_chimp$int.qval,
chimp_rhesus = res.riborna_full_chimp_rhesus$int.qval,
human_rhesus = res.riborna_full_human_rhesus$int.qval)
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "q-value", main = names(plot_list)[i] )
}
?p.adjust
a = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "bonferroni")
str(a)
sum(a)
summary(a)
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "hochberg"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "hochberg"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "hocherg"))
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "hochberg"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "hochberg"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "hochberg"))
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "p-value", main = names(plot_list)[i] )
}
summary(plot_list[[1]])
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "hochberg"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "hochberg"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "hochberg"))
for (i in 1: length(plot_list)) {
hist(log10plot_list[[i]]), xlab = "p-value", main = names(plot_list)[i] )
}
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "hochberg"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "hochberg"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "hochberg"))
for (i in 1: length(plot_list)) {
hist(log10(plot_list[[i]]), xlab = "p-value", main = names(plot_list)[i] )
}
summary(plot.list)
kable(summary(plot_list[[1]]) )
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "bonferroni"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "bonferroni"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "bonferroni"))
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "p-value", main = names(plot_list)[i] )
}
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "hochberg"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "hochberg"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "hochberg"))
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "BH adjusted p-value", main = names(plot_list)[i] )
}
summary(plot_list[[1]])
summary(plot_list[[2]])
summary(plot_list[[3]])
sum(plot_list[[1]] < .005)
sum(plot_list[[1]] < .001)
summary(plot_list[[1]])
sum(plot_list[[1]] < .005)
plot_list[[1]][order(plot_list[[1]])]
sum(plot_list[[2]])
plot_list[[2]][order(plot_list[[2]])]
sum(plot_list[[2]] < .01)
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "bonferroni"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "bonferroni"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "bonferroni"))
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "Bonferroni adjusted p-value",
main = names(plot_list)[i] )
}
summary(plot_list[[1]])
sum(plot_list[[1]] < .01)
sum(plot_list[[1]] < .05)
sum(plot_list[[1]] < .1)
sum(plot_list[[2]] < .1)
sum(plot_list[[3]] < .1)
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "hochberg"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "hochberg"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "hochberg"))
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "BH adjusted p-value", main = names(plot_list)[i] )
}
# human vs. chimp BH adjusted p-values
summary(plot_list[[1]])
# chimp vs. rhesus BH adjusted p-values
summary(plot_list[[2]])
# human vs. rhesus
summary(plot_list[[3]])
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "fdr"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "fdr"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "fdr") )
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "BH adjusted p-value", main = names(plot_list)[i] )
}
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "holm"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "holm"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "holm") )
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "BH adjusted p-value", main = names(plot_list)[i] )
}
par(mfrow = c(2,2))
plot_list <- list(human_chimp = p.adjust(res.riborna_full_human_chimp$int.pval,
method = "BY"),
chimp_rhesus = p.adjust(res.riborna_full_chimp_rhesus$int.pval,
method = "BY"),
human_rhesus = p.adjust(res.riborna_full_human_rhesus$int.pval,
method = "BY") )
for (i in 1: length(plot_list)) {
hist(plot_list[[i]], xlab = "BH adjusted p-value", main = names(plot_list)[i] )
}
run_pca
source("functions.R")
ls()
getwd()
ls()
hist(res.rnapro$int.pval)
par(mfrow=c(2,2))
hist(res.rnapro$int.pval)
hist(res.ribopro$int.pval)
load("../rdas/DE.rda")
hist(riboRes.Q$pval)
permute_interact <- function(eset_full, datatypes, permute_labels) {
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_sub) = featureData(eset_sub)
return(interact2way(eset_sub) )
})
null_interact
}
n_permute <- 10
n_genes <- 3188
library(Biobase)
library(Humanzee)
permute_labels <- lapply(1:n_permute, function(per_null){
data.frame(rna = sample(1:n_genes, replace = FALSE),
ribo = sample(1:n_genes, replace = FALSE),
pro = sample(1:n_genes, replace = FALSE))
})
load(file.path(rdadir, "eSetRRP.rda"))
eSetRRP.RP.Q.log2
eset_full = eSetRRP.RP.Q.log2
datatypes = c("rna", "ribo")
permute_labels = permute_labels[1]
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
eset_sub
n_permute
length(permute_labels)
permute_labels
str(permute_labels)
each_null = 1
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
permute_interact <- function(eset_full, datatypes, permute_labels) {
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_per_null) = featureData(eset_sub)
return(interact2way(eset_per_null) )
})
null_interact
}
res_null_rna_ribo <- permute_interact(eset_full = eSetRRP.RP.Q.log2,
datatypes = c("rna", "ribo"),
permute_labels = permute_labels[1])
str(res_null_rna_ribo)
head(res_null_rna_ribo[[1]][1:10,])
str(res.riborna)
head(res.riborna[1:10,1:3])
head(res_null_rna_ribo[[1]][1:10,])
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_per_null) = featureData(eset_sub)
eset_per_null
pData(eset_per_null)
pData(eset_sub)
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
colnames(emat_per_null)
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_per_null) = featureData(eset_sub)
a <- interact2way(eset_per_null)
str(a)
n_permute
order_datatypes
exclude_datatypes
pData(eset_sub)
experimentData(eset_sub)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null))
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null))
phenoData(eset_per_null) <- phenoData(eset_sub)
featureData(eset_per_null) <- featureData(eset_sub)
permute_interact <- function(eset_full, datatypes, permute_labels) {
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null))
phenoData(eset_per_null) <- phenoData(eset_sub)
featureData(eset_per_null) <- featureData(eset_sub)
return(interact2way(eset_per_null) )
})
null_interact
}
interact2way
install_github("jhsiao999/Humanzee")
require(Humanzee)
interact2way
ls()
str(rnapro_null_pro_buff)
install.packages("doParallel")
require(doParallel)
?registerDoParallel
install_github("jhsiao999/Humanzee")
