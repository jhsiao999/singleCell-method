v <- -pi + atan(beta2/beta1);
if(beta2 >0 & beta1==0)
v <- pi/2;
if(beta2 <0 & beta1==0)
v <- - (pi/2);
if (v < 0)
v <- v + 2*pi;
# print(v)
#  print(beta1)
#  print(beta2)
return(v)
}
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
sigma <- array(0,G);
amp <- array(0,G); phi <- array(0,G);
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
library(parallel)
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
lmfit_list[[1]]
lmfit_list[[1]]$out_amp
amp <- unlist(lapply(lmfit_list, function(n) return(lmfit_list[[n]]$out_amp)));
amp <- unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp)));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
phi <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_phi))));
amp[1]
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
}
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
amp[1]
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycler)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- read.table("../data/batch_removed_counts_all_genes.txt");
cycle_counts_data <- t(molecules_single);
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
out <- get(load(file="../rdas/cell_order_ipsc.rda"));
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_high_indices <- which(SNR > 1);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
rm(SNR); rm(amp_genes); rm(sd_genes); rm(phi_genes);
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
library(qtlcharts)
library(cellcycleR)
library(data.table)
library(limma)
library(mygene)
library(knitr)
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
cycle_counts_data <- t(molecules_single);
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
dim(molecules_single)
which(colSums(cycle_data_norm)==0)
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
cycle_counts_data <- t(molecules_single);
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, which(colSums(cycle_data_norm)!=0)]
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_high_indices <- which(SNR > 1);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
rm(SNR); rm(amp_genes); rm(sd_genes); rm(phi_genes);
dim(cycle_data_norm)
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
cycle_counts_data <- molecules_single;
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, which(colSums(cycle_data_norm)!=0)]
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_high_indices <- which(SNR > 1);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
rm(SNR); rm(amp_genes); rm(sd_genes); rm(phi_genes);
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_high_indices <- which(SNR > 3);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
rm(SNR); rm(amp_genes); rm(sd_genes); rm(phi_genes);
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal_full.rda"));
amp_genes <- out2$amp;
sd_genes <- out2$sigma;
phi_genes <- out2$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
sinusoidal_gene_names <- colnames(cycle_data_norm_sinusoidal);
imp_genes <- sinusoidal_gene_names[order(SNR, decreasing=TRUE)]
top_genes_100 <- imp_genes[1:100];
rownames(cycle_data_norm_sinusoidal)
colnames(cycle_data_norm_sinusoidal)
colnames(molecules_single)
molecules_single[1,]
molecules_single[1:2,1:4]
library(CountClust)
library(data.table)
library(maptpx)
library(gplots)
library(philentropy)
library(dplyr)
library(edgeR)
library(qtlcharts)
library(limma)
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
quality_single_cells <- scan("../data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('../data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
## Remove ERCC genes and genes with max molecule numer larger than 1024
ii_nonERCC <- grep("ERCC", rownames(molecules_single), invert = TRUE)
molecules_single <- molecules_single[ii_nonERCC,];
ii_notOverexpressed <- apply(molecules_single, 2, function(x) any(x < 1024) )
molecules_single <- molecules_single[ii_notOverexpressed,];
dim(molecules_single)
counts_data <- t(molecules_single);
individual_id <- sapply(1:length(rownames(counts_data)), function(x) strsplit(rownames(counts_data)[x],"[.]")[[1]][1]);
batch_id <- sapply(1:length(rownames(counts_data)), function(x) strsplit(rownames(counts_data)[x],"[.]")[[1]][2]);
individual.batch.id <- paste0(individual_id,"_", batch_id);
batch_corrected_counts <- BatchCorrectedCounts(counts_data,individual.batch.id);
colnames(counts_data)[1:5]
colnames(batch_corrected_counts) <-colnames(counts_data)
batch_corrected_counts[1:5,1:5]
write.table(batch_corrected_counts,"../data/batch_removed_counts_all_genes.txt");
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
cycle_counts_data <- molecules_single;
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, which(colSums(cycle_data_norm)!=0)]
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_high_indices <- which(SNR > 3);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
rm(SNR); rm(amp_genes); rm(sd_genes); rm(phi_genes);
colnames(cycle_data_norm_sinusoidal)
molecules_single[1:5,1:5]
colnames(batch_corrected_counts)
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
colnames(molecules_single)[1:5]
molecules_single[1,1:5]
molecules_single <- fread("../data/batch_removed_counts_all_genes.txt");
molecules_single[1,1:5]
molecules_single[1:4,1:5]
molecules_single <- read.table("../data/batch_removed_counts_all_genes.txt");
molecules_single[1:5,1:5]
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
molecules_single[1:5,1:5]
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
colnames <- strsplit(readLines(textConnection(input), n=1), ",")[[1]]
colnames <- strsplit(readLines(textConnection("../data/batch_removed_counts_all_genes.txt"), n=1), ",")[[1]]
colnames[1] <- "rownames";
setnames(tab <- fread("../data/batch_removed_counts_all_genes.txt", skip = 1, header=FALSE), colnames);
tab <- data.frame(fread("../data/batch_removed_counts_all_genes.txt", skip = 1, header=FALSE));
tab[1:5,1:5]
colnames
readLines(textConnection("../data/batch_removed_counts_all_genes.txt"), n=1)
readLines("../data/batch_removed_counts_all_genes.txt", n=1)
colnames <- readLines("../data/batch_removed_counts_all_genes.txt", n=1)
length(colnames)
strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"\")[[1]]
)
strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"\t")
colnames <- strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")
strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"\t")
colnames
length(colnames)
dim(colnames)
class(colnames)
colnames <- strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[\ ]")[[1]]
colnames
colnames <- strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[\]")[[1]]
colnames <- strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]]
length(colnames)
colnames <- strsplit(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]],"\\\\")
colnames
colnames <- strsplit(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]],"\\")
colnames <- strsplit(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]],"\\\")
)
colnames <- strsplit(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]],"\\\\")
colnames
temp <- strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]][1]
temp
temp1 <- strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[\\\\]")[[1]]
temp1
unlist(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]])
temp
strsplit(temp,"\")
strsplit(temp,"\\")
strsplit(temp,"\\\\")
strsplit(temp,"[\.")
strsplit(temp,"[\\\\.")
strsplit(temp,"[\\.")
strsplit(temp,""\"")
strsplit(temp,"["\"]")
strsplit(temp,"["\\\\"]")
strsplit(temp,"[\\\\]")
unlist(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"\t")[[1]]
)
vec <- unlist(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"\t")[[1]])
vec
class(vec)
vec <- unlist(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]])
vec
unlist(strsplit(readLines("../data/batch_removed_counts_all_genes.txt", n=1),"[ ]")[[1]])
vec[1]
strsplit(vec[1], function(x) "\\\\")
strsplit(vec[1], "\\\\")
strsplit(vec[1], "[.\\\\]")
strsplit(vec[1], "[.\\\\.]")
strsplit(as.chracter(vec[1]), "[.\\\\.]")
strsplit(as.character(vec[1]), "[.\\\\.]")
strsplit(as.character(vec[1]), "[\\\\]")
strsplit(as.character(vec[1]), "\\\\")
strsplit(as.character(vec[1]), ".*\\.*")
strsplit(as.character(vec[1]), ".*\\*.")
strsplit(as.character(vec[1]), ".*\\.*")
strsplit(as.character(vec[1]), " .*\\.* ")
colnames <- colnames(read.table("../data/batch_removed_counts_all_genes.txt"))
colnames
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
colnames <- colnames(read.table("../data/batch_removed_counts_all_genes.txt"))
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt", skip = 1, header=FALSE));
colnames(molecules_single) <- colnames
cycle_counts_data <- molecules_single;
dim(cycle_counts_data)
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names = 1);
molecules_single[1:4,1:4]
colnames <- colnames(read.table("../data/batch_removed_counts_all_genes.txt"));
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
colnames <- colnames(read.table("../data/batch_removed_counts_all_genes.txt"));
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names =1);
colnames(molecules_single) <- colnames
cycle_counts_data <- molecules_single;
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, which(colSums(cycle_data_norm)!=0)]
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_high_indices <- which(SNR > 3);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
SNR[order(SNR, decreasing=TRUE)[1:10]]
library(qtlcharts)
library(CountClust)
library(parallel)
library(cellcycleR)
library(data.table)
library(binhf)
library(vioplot)
library(limma)
library(readxl)
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names = 1);
cycle_counts_data <- molecules_single;
dim(cycle_counts_data)
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
celltime_levels <- 100;
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
cell_order_full <- cell_ordering_full(out$signal_intensity, dim(cycle_data_norm)[2])
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
length(amp_genes)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=50, save_path="../rdas/cell_order_ipsc_full.rda")
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
vioplot(cell_order_full[which(cell_phases=="G1.S")],
cell_order_full[which(cell_phases=="S")],
cell_order_full[which(cell_phases=="G2.M")],
cell_order_full[which(cell_phases=="M")],
cell_order_full[which(cell_phases=="M.G1")],
names=c("G1","S","G2M","M","M.G1"),
col="red")
iplotCurves(t(cycle_data_norm[c(which(cell_phases=="G1"),which(cell_phases=="S"), which(cell_phases=="G2.M"),which(cell_phases=="M"),which(cell_phases=="M.G1")),top_genes]))
cell_phases <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
vioplot(cell_order_full[which(cell_phases=="G1.S")],
cell_order_full[which(cell_phases=="S")],
cell_order_full[which(cell_phases=="G2.M")],
cell_order_full[which(cell_phases=="M")],
cell_order_full[which(cell_phases=="M.G1")],
names=c("G1","S","G2M","M","M.G1"),
col="red")
iplotCurves(t(cycle_data_norm[c(which(cell_phases=="G1"),which(cell_phases=="S"), which(cell_phases=="G2.M"),which(cell_phases=="M"),which(cell_phases=="M.G1")),top_genes]))
vioplot(cell_order_full[which(cell_phases=="G1.S")],
cell_order_full[which(cell_phases=="S")],
cell_order_full[which(cell_phases=="G2.M")],
cell_order_full[which(cell_phases=="M")],
cell_order_full[which(cell_phases=="M.G1")],
names=c("G1","S","G2M","M","M.G1"),
col="red")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 10);
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
snr_high_indices <- which(SNR > 1);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
dim(cycle_data_norm)
out2 <- cell_ordering_class(cycle_data_norm_sinusoidal, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_sinusoidal_full.rda")
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal_full.rda"));
cell_order_full <- cell_ordering_full(out2$signal_intensity, dim(cycle_data_norm_sinusoidal)[2])
dim(cycle_data_norm_sinusoidal)
amp_genes <- out2$amp;
sd_genes <- out2$sigma;
phi_genes <- out2$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 3);
new_cell_order <- shift(order(cell_order_full),0,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
new_cell_order <- shift(order(cell_order_full),100,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
