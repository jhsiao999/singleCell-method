cex = .5,
col = c("red", "blue")[metadata$condition])
plot(x = pca_ercc$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
pch = "", xlim = c(-10, 10),
ylab = "total ERCC mapped reads",
xlab = "ERCC PC1")
text(x = pca_ercc$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
pca_normed <- prcomp(t(reads_ruv_k1$normalizedCounts[which_ensg]),
retx = TRUE, center = TRUE,
scale. = TRUE)
pca_normed <- prcomp(t(reads_ruv_k1$normalizedCounts[which_ensg, ]),
retx = TRUE, center = TRUE,
scale. = TRUE)
reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(reads_ruv_k1$normalizedCounts[which_ensg, ])
plotRLE(reads_ruv_k1$normalizedCounts[which_ensg, ], outline = FALSE)
plotRLE(reads_raw[which_ensg, ], outline = FALSE)
plotRLE(reads_raw[which_ensg, ], outline = FALSE)
plotRLE(reads_ruv_k1$normalizedCounts[which_ensg, ], outline = FALSE)
pca_normed <- prcomp(t(log(reads_ruv_k1$normalizedCounts[which_ensg, ] + 1)),
retx = TRUE, center = TRUE,
scale. = TRUE)
pca_normed <- prcomp(t(log2(reads_ruv_k1$normalizedCounts[which_ensg, ] + 1)),
retx = TRUE, center = TRUE,
scale. = TRUE)
summary(log2(reads_ruv_k1$normalizedCounts[which_ensg, ] + 1))
?prcomp
pca_normed <- prcomp(t(log2(reads_ruv_k1$normalizedCounts[which_ensg, ] + 1)),
retx = TRUE, center = FALSE,
scale. = TRUE)
plot(x = pca_normed$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
pch = "", xlim = c(-150, 200),
ylab = "total ENSG mapped reads",
xlab = "ENSG PC1")
text(x = pca_normed$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
plot(x = pca_normed$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
pch = "",
ylab = "total ENSG mapped reads",
xlab = "ENSG PC1")
text(x = pca_normed$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
pch = "",
ylab = "total ENSG mapped reads",
xlab = "ENSG PC1")
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
col = c("red", "blue")[metadata$condition])
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
pch = "")
text(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
labels = metadata$sample, cex = .6,
col = c("red", "blue")[metadata$condition])
pca_normed <- prcomp(t(log2(reads_ruv_k1$normalizedCounts[which_ensg, ] + 1)),
retx = TRUE, center = TRUE,
scale. = TRUE)
ensg_normed <- log2(reads_ruv_k1$normalizedCounts[which_ensg, ] + 1)
ensg_normed
summary(colSums(ensg_normed))
summary(rowSums(ensg_normed))
?"RUVg"
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
summary(colSums(ensg_normed))
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
pca_normed <- prcomp(ensg_normed,
retx = TRUE, center = TRUE,
scale. = TRUE)
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
pca_normed <- prcomp(ensg_normed,
retx = TRUE, center = TRUE,
scale. = TRUE)
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
pch = "")
text(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
labels = metadata$sample, cex = .6,
col = c("red", "blue")[metadata$condition])
summary(pca_normed$x)
summary(pca_normed$x)////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
library(RUVSeq)
library(edgeR)
library(knitr)
opts_knit$set(progress = TRUE, verbose = TRUE)
opts_chunk$set(message = FALSE, warning = FALSE, eval = TRUE,
echo = TRUE)
read_files <- list.files(path = "../data/gse-53334",
full.names = TRUE)
reads_raw <- do.call(cbind,
lapply(1:length(read_files),
function(per_file) {
reads <- read.table( read_files[per_file],
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
reads <- as.numeric(unlist(reads))
})
)
dim(reads_raw)
rownames(reads_raw) <-
rownames(read.table(read_files[1],
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1) )
reads_raw <- reads_raw[rowSums(reads_raw) > 0, ]
head(reads_raw)
read_files_list <- lapply(1:length(read_files),
function(per_file) {
strsplit(read_files[per_file], split = "_", fixed = TRUE)
})
condition <- unlist( lapply(read_files_list, function(xx) xx[[1]][2]) )
pool <- unlist( lapply(read_files_list, function(xx) xx[[1]][3]) )
run <- unlist( lapply(read_files_list, function(xx) xx[[1]][4]) )
run <- as.numeric(gsub("[^\\d]+", "", run, perl=TRUE))
metadata <- data.frame(condition = condition,
pool = pool,
run = run,
sample = paste(rep(c("C", "T"), each = 6),
pool, run, sep = "."))
which_ercc <- grep("ERCC", rownames(reads_raw))
which_ensg <- grep("ERCC", rownames(reads_raw), invert = TRUE)
library(matrixStats)
par(mfrow = c(1,2))
barplot(colSums(reads_raw[which_ercc, ]),
col = c("red", "blue")[metadata$condition],
names.arg = metadata$sample,
cex.axis = .6)
title(main = "ERCC counts")
barplot(colSums(reads_raw[which_ensg, ]),
col = c("red", "blue")[metadata$condition],
names.arg = metadata$sample,
cex.axis = .6)
title(main = "ENSG counts")
pca_ensg <- prcomp(t(reads_raw[which_ensg, ]),
retx = TRUE, scale. = TRUE, center = TRUE)
pca_ercc <- prcomp(t(reads_raw[which_ercc, ]),
retx = TRUE, scale. = TRUE, center = TRUE)
par(mfrow = c(1,2))
plot(x = pca_ensg$x[ ,1],
y = pca_ensg$x[ ,2],
xlab = "PC1", ylab = "PC2",
pch = 16, col = c("red", "blue")[metadata$condition],
main = "ENSG")
plot(x = pca_ercc$x[ ,1],
y = pca_ercc$x[ ,2],
xlab = "PC1", ylab = "PC2",
pch = 16, col = c("red", "blue")[metadata$condition],
main = "ERCC")
plot(x = pca_ercc$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
pch = "", xlim = c(-10, 10),
ylab = "total ERCC mapped reads",
xlab = "ERCC PC1")
text(x = pca_ercc$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
plot(x = pca_ensg$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
pch = "", xlim = c(-150, 200),
ylab = "total ENSG mapped reads",
xlab = "ENSG PC1")
text(x = pca_ensg$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
reads_ruv_k1 <- RUVg(as.matrix(reads_raw),
cIdx = which_ercc,
k = 1)
par(mfrow = c(1,2))
plotRLE(reads_raw[which_ensg, ], outline = FALSE)
plotRLE(reads_ruv_k1$normalizedCounts[which_ensg, ], outline = FALSE)
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
pca_normed <- prcomp(ensg_normed,
retx = TRUE, center = TRUE,
scale. = TRUE)
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
pch = "", xlim )
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
pch = "")
text(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
labels = metadata$sample, cex = .6,
col = c("red", "blue")[metadata$condition])
pca_normed$x[ ,1]
library(RUVSeq)
library(edgeR)
library(knitr)
opts_knit$set(progress = TRUE, verbose = TRUE)
opts_chunk$set(message = FALSE, warning = FALSE, eval = TRUE,
echo = TRUE)
read_files <- list.files(path = "../data/gse-53334",
full.names = TRUE)
reads_raw <- do.call(cbind,
lapply(1:length(read_files),
function(per_file) {
reads <- read.table( read_files[per_file],
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
reads <- as.numeric(unlist(reads))
})
)
dim(reads_raw)
rownames(reads_raw) <-
rownames(read.table(read_files[1],
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1) )
reads_raw <- reads_raw[rowSums(reads_raw) > 0, ]
head(reads_raw)
read_files_list <- lapply(1:length(read_files),
function(per_file) {
strsplit(read_files[per_file], split = "_", fixed = TRUE)
})
condition <- unlist( lapply(read_files_list, function(xx) xx[[1]][2]) )
pool <- unlist( lapply(read_files_list, function(xx) xx[[1]][3]) )
run <- unlist( lapply(read_files_list, function(xx) xx[[1]][4]) )
run <- as.numeric(gsub("[^\\d]+", "", run, perl=TRUE))
metadata <- data.frame(condition = condition,
pool = pool,
run = run,
sample = paste(rep(c("C", "T"), each = 6),
pool, run, sep = "."))
which_ercc <- grep("ERCC", rownames(reads_raw))
which_ensg <- grep("ERCC", rownames(reads_raw), invert = TRUE)
library(matrixStats)
par(mfrow = c(1,2))
barplot(colSums(reads_raw[which_ercc, ]),
col = c("red", "blue")[metadata$condition],
names.arg = metadata$sample,
cex.axis = .6)
title(main = "ERCC counts")
barplot(colSums(reads_raw[which_ensg, ]),
col = c("red", "blue")[metadata$condition],
names.arg = metadata$sample,
cex.axis = .6)
title(main = "ENSG counts")
pca_ensg <- prcomp(t(reads_raw[which_ensg, ]),
retx = TRUE, scale. = TRUE, center = TRUE)
pca_ercc <- prcomp(t(reads_raw[which_ercc, ]),
retx = TRUE, scale. = TRUE, center = TRUE)
par(mfrow = c(1,2))
plot(x = pca_ensg$x[ ,1],
y = pca_ensg$x[ ,2],
xlab = "PC1", ylab = "PC2",
pch = 16, col = c("red", "blue")[metadata$condition],
main = "ENSG")
plot(x = pca_ercc$x[ ,1],
y = pca_ercc$x[ ,2],
xlab = "PC1", ylab = "PC2",
pch = 16, col = c("red", "blue")[metadata$condition],
main = "ERCC")
plot(x = pca_ercc$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
pch = "", xlim = c(-10, 10),
ylab = "total ERCC mapped reads",
xlab = "ERCC PC1")
text(x = pca_ercc$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
plot(x = pca_ensg$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
pch = "", xlim = c(-150, 200),
ylab = "total ENSG mapped reads",
xlab = "ENSG PC1")
text(x = pca_ensg$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
labels = as.character(metadata$sample),
cex = .5,
col = c("red", "blue")[metadata$condition])
reads_ruv_k1 <- RUVg(as.matrix(reads_raw),
cIdx = which_ercc,
k = 1)
par(mfrow = c(1,2))
plotRLE(reads_raw[which_ensg, ], outline = FALSE)
plotRLE(reads_ruv_k1$normalizedCounts[which_ensg, ], outline = FALSE)
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
pca_normed <- prcomp(t(ensg_normed),
retx = TRUE, center = TRUE,
scale. = TRUE)
ensg_normed <- reads_ruv_k1$normalizedCounts[which_ensg, ]
summary(rowSums(ensg_normed))
pca_normed <- prcomp(t(ensg_normed),
retx = TRUE, center = TRUE,
scale. = TRUE)
pca_normed <- prcomp(t(ensg_normed),
retx = TRUE, center = FALSE,
scale. = TRUE)
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
pch = "")
text(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
labels = metadata$sample, cex = .6,
col = c("red", "blue")[metadata$condition])
par(mfrow = c(2,2))
plot(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
ylab = "ENSG PC2",
xlab = "ENSG PC1",
pch = "")
text(x = pca_normed$x[ ,1],
y = pca_normed$x[ ,2],
labels = metadata$sample, cex = .6,
col = c("red", "blue")[metadata$condition])
plot(x = pca_normed$x[ ,1],
y = colSums(reads_raw[which_ensg, ]),
pch = 16,
ylab = "total ENSG mapped reads",
xlab = "ENSG RUV-normed PC1",
col = c("red", "blue")[metadata$condition])
plot(x = pca_normed$x[ ,1],
y = colSums(reads_raw[which_ercc, ]),
pch = 16,
ylab = "total ENSG mapped reads",
xlab = "ENSG RUV-normed PC1",
col = c("red", "blue")[metadata$condition])
browseVignettes("sva")
library(sva)
library(knitr)
opts_knit$set(progress = TRUE, verbose = TRUE)
opts_chunk$set(message = FALSE, warning = FALSE, eval = TRUE,
echo = TRUE)
source("../R/functions.R")
molecules_filter <- read.table("../data/molecules-filter.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
head(molecules_filter[1:2, 1:5])
molecules_ercc <- molecules_filter[ grep("ERCC", rownames(molecules_filter)), ]
molecules_cpm_ercc <- read.table("../data/molecules-cpm-ercc.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
head(molecules_cpm_ercc[1:2, 1:5])
annotation_filter <- read.table("../data/annotation-filter.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE)
head(annotation_filter)
stopifnot(NCOL(molecules_filter) == NROW(annotation_filter))
?svaseq
controls = grep("ERCC", rownames(molecules_filter))
str(controls)
controls <- rownames(molecules_filter) %in% grep("ERCC", rownames(molecules_filter))
str(controls)
sum(controls)
controls <- rownames(molecules_filter) %in% rownames(molecules_filter)[grep("ERCC", rownames(molecules_filter))]
str(controls)
sum(controls)
library(zebrafishRNASeq)
require(BiocInstaller)
library(zebrafishRNASeq)
biocLite(zebrafishRNASeq)
biocLite("zebrafishRNASeq")
library(genefilter)
data(zfGenes)
library(zebrafishRNASeq)
data(zfGenes)
filter = apply(zfGenes, 1, function(x) length(x[x>5])>=2)
filtered = zfGenes[filter,]
str(filtered)
min(filtered)
sum(filtered == 1)
mod1 <- model.matrix(~individual,
data = annotation_filter)
mod0 <- cbind(mod1[,1])
mod0
sup_svseq <- svaseq(molecules_filter,
mod1, mod0, controls=controls, n.sv=1)$sv
plot(sup_svseq, svseq, pch=19, col="blue")
svseq <- svaseq(molecules_filter,
mod1, mod0, n.sv=1)$sv
svseq <- svaseq(molecules_filter[grep("ERCC", rownames(molecules_filter), invert = TRUE), ],
mod1, mod0, n.sv=1)$sv
str(molecules_filter[grep("ERCC", rownames(molecules_filter), invert = TRUE), ])
dim(molecules_filter[grep("ERCC", rownames(molecules_filter), invert = TRUE), ])
dim(molecules_filter)
svseq <-
svaseq(matrix(molecules_filter[grep("ERCC", rownames(molecules_filter), invert = TRUE)), ],
mod1, mod0, n.sv=1)$sv
svseq <- svaseq(matrix(molecules_filter[grep("ERCC", rownames(molecules_filter), invert = TRUE), ]),
mod1, mod0, n.sv=1)$sv
svseq <- svaseq(as.matrix(molecules_filter[grep("ERCC", rownames(molecules_filter), invert = TRUE), ]),
mod1, mod0, n.sv=1)$sv
plot(svseq, pch=19, col="blue")
plot(sup_svseq, svseq, pch=19, col="blue")
str(svseq)
batch <- annotation_filter$batch
library(sva)
library(knitr)
opts_knit$set(progress = TRUE, verbose = TRUE)
opts_chunk$set(message = FALSE, warning = FALSE, eval = TRUE,
echo = TRUE)
source("../R/functions.R")
molecules_filter <- read.table("../data/molecules-filter.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
head(molecules_filter[1:2, 1:5])
molecules_ercc <- molecules_filter[ grep("ERCC", rownames(molecules_filter)), ]
molecules_cpm_ercc <- read.table("../data/molecules-cpm-ercc.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
head(molecules_cpm_ercc[1:2, 1:5])
annotation_filter <- read.table("../data/annotation-filter.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE)
head(annotation_filter)
stopifnot(NCOL(molecules_filter) == NROW(annotation_filter))
getwd()
molecules_cpm_trans <- read.table("../data/molecules-cpm-trans.txt",
header = TRUE, sep = "\t",
stringsAsFactors = FALSE,
row.names = 1)
batch <- annotation_filter$batch
modcombat <- model.matrix(~1, data = annotation_filter)
?ComBat
pheno = pData(bladderEset)
library(sva)
library(bladderbatch)
require(BiocInstaller)
biocLite("bladderbatch")
library(bladderbatch)
data(bladderbatch)
data(bladderdata)
library(pamr)
biocLite("pamr")
library(limma)
pheno = pData(bladderEset)
edata = exprs(bladderEset)
head(edata)
summary(edata)
batch <- annotation_filter$batch
modcombat <- model.matrix(~1, data = annotation_filter)
combat_edata <- ComBat(dat = molecules_cpm_trans, batch = batch,
mod = modcombat, par.prior=TRUE, prior.plots=FALSE)
library(testit)
names(combat_edata)
str(combat_edata)
dim(combat_edata)
combat_pca <- prcomp(combat_edata,
retx = TRUE, scale. = TRUE, center = TRUE)
library(ggplot2)
plot_pca
combat_pca <- prcomp(combat_edata,
retx = TRUE, scale. = TRUE, center = TRUE)
plot_pca(x = combat_pca, pcx = combat_pca$x[ ,1],
pcy = combat_pca$x[ ,2],
metadata = annotation_filter,
color = annotation_filter$individual,
shape = annotation_filter$replicate)
combat_pca <- run_pca(combat_edata)
plot_pca(x = combat_pca$PCs,
explained = combat_pca$explained,
metadata = annotation_filter,
color = "individual",
shape = "replicate") +
labs(title = "ComBat corrected for batch effect")
batch <- annotation_filter$batch
modcombat_ind <- model.matrix(~ individual, data = annotation_filter)
combat_edata_ind <- ComBat(dat = molecules_cpm_trans, batch = batch,
mod = modcombat_ind, par.prior=TRUE, prior.plots=FALSE)
dim(combat_edata_ind)
batch <- annotation_filter$batch
modcombat_ind <- model.matrix(~ individual, data = annotation_filter)
combat_edata_ind <- ComBat(dat = molecules_cpm_trans, batch = batch,
mod = modcombat_ind, par.prior=TRUE, prior.plots=FALSE)
table(annotation_filter$batch)
