gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 13
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 12
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 11
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 10
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 9
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 8
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 7
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 6
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 5
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 4
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 3
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 2
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 1
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
Inf
Inf > Inf
-Inf > -Inf
data= data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gtex_thinned_version_1.txt'))[,-1];
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt");
test_indices <- which(samples_id[,3]=='Heart - Left Ventricle' | samples_id[,3]=='Muscle - Skeletal');
test_indices_sampled <- sample(test_indices, 50, replace=FALSE);
samples <- data[,test_indices_sampled];
col = c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)), rgb(1,seq(1,0,length=15),seq(1,0,length=15)));
library(data.table)
library(limma)
library(philentropy)
library(maptpx)
data= data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gtex_thinned_version_1.txt'))[,-1];
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt");
test_indices <- which(samples_id[,3]=='Heart - Left Ventricle' | samples_id[,3]=='Muscle - Skeletal');
test_indices_sampled <- sample(test_indices, 50, replace=FALSE);
samples <- data[,test_indices_sampled];
col = c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)), rgb(1,seq(1,0,length=15),seq(1,0,length=15)));
png(filename="../plots/heart_muscle_hierarchical_heatmap_average.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="average"));
dev.off()
librray(gplots)
library(gplots)
png(filename="../plots/heart_muscle_hierarchical_heatmap_average.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="average"));
dev.off()
png(filename="../plots/heart_muscle_hierarchical_heatmap_complete.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="complete"));
dev.off()
install_github('kkdey/tmcmcR')
library(devtools)
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
base=rnorm(d,0,1);
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x,mu_target, Sigma_target)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
source('~/Documents/singleCell-method/project/R/cell_order/cell_cycle_sim.R')
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
atan3 <- function(beta2, beta1)
{
if (beta1 > 0)
v <- atan(beta2/beta1);
if(beta2 >=0 & beta1 <0)
v <- pi + atan(beta2/beta1);
if(beta2 <0 & beta1 <0)
v <- -pi + atan(beta2/beta1);
if(beta2 >0 & beta1==0)
v <- pi/2;
if(beta2 <0 & beta1==0)
v <- - (pi/2);
if (v < 0)
v <- v + 2*pi;
# print(v)
#  print(beta1)
#  print(beta2)
return(v)
}
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
sigma <- array(0,G);
amp <- array(0,G); phi <- array(0,G);
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
library(parallel)
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
lmfit_list[[1]]
lmfit_list[[1]]$out_amp
amp <- unlist(lapply(lmfit_list, function(n) return(lmfit_list[[n]]$out_amp)));
amp <- unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp)));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
phi <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_phi))));
amp[1]
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
}
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
amp[1]
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycler)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
grep("Nuclues", samples_id)
samples_id
grep("Nuclues", as.character(samples_id))
unique(samples_id)
grep("Nucleus", as.character(samples_id))
class(samples_id)
source('~/Documents/count-clustering/src/gtex_v6.R')
samples_id[grep("Nucleus", samples_id)] = "Brain -N. accumbens (basal ganglia)"
grep("Nucleus", samples_id)
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt")[,3];
samples_id[grep("Nucleus", samples_id)] = "Brain -N. accumbens (basal ganglia)"
grep("Nucleus", samples_id)
unique(samples_id)
grep("Nucleus", samples_id)
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt")[,3];
grep("Nucleus", samples_id)
samples_id[grep("Nucleus", samples_id)] = "Brain -N. accumbens (basal ganglia)"
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt")[,3];
samples_id <- as.character(samples_id)
samples_id[grep("Nucleus", samples_id)] = "Brain -N. accumbens (basal ganglia)"
samples_id <- as.factor(samples_id)
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
par(mar=c(14,4,2,2))
barplot(t(docweights_ordering),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",K),las=1,ylim=c(0,1),cex.axis=1,cex.main=1)
labels = match(unique(samples_id_ordered), samples_id_ordered);
abline(v=labels,lwd=2)
labels_low=labels;
labels_up=c(labels[2:length(labels)],dim(docweights_ordering)[1]);
mid_point=labels_low +0.5*(labels_up-labels_low);
unique_brain_id_ordered <- as.character(unique(samples_id_ordered));
unique_brain_id_ordered[grep("Nucleus",unique(samples_id_ordered))]="Brain -N. accumbens (basal ganglia)"
axis(1,at=mid_point, factor(unique_brain_id_ordered),las=2, cex.axis=0.8);
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
grep("anteri", samples_id)
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt")[,3];
samples_id <- as.character(samples_id)
grep("anteri", samples_id)
grep("ante", samples_id)
samples_id
unique(samples_id)
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
getwd()
setwd('"/Users/kushal/Documents/singleCell-method/project/analysis/')
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus+1)),
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
source('~/Documents/count-clustering/src/gtex_v6.R')
rm(list=ls())
library(data.table)
#install_github('kkdey/maptpx') otherwise shows error
library(maptpx)
library(CountClust)
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell";
cell_meta[grep("8cell_2pooled", files)]="8cell";
cell_meta[grep("8cell_split", files)]="8cell";
cell_meta[grep("16cell_2pooled", files)]="16cell";
cell_meta[grep("16cell_split", files)]="16cell";
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell_2pooled","8cell_split","8cell_smartseq","8cell","16cell_2pooled","16cell_split","16cell","earlyblast","midblast","lateblast") ;
cell_meta
cell_meta_unique
cell_meta[[1]]
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
getwd()
setwd("/Users/kushal/Documents/singleCell-method/project/")
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
fread('../data/Deng cell data/Deng_cell_data.txt')
setwd("/Users/kushal/Documents/singleCell-method/project/analysis/")
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell";
cell_meta[grep("8cell_2pooled", files)]="8cell";
cell_meta[grep("8cell_split", files)]="8cell";
cell_meta[grep("16cell_2pooled", files)]="16cell";
cell_meta[grep("16cell_split", files)]="16cell";
cell_meta
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell_2pooled","8cell_split","8cell_smartseq","8cell","16cell_2pooled","16cell_split","16cell","earlyblast","midblast","lateblast") ;
cell_meta_unique
match(cell_meta,cell_meta_unique)
order_of_development <- order(match(cell_meta,cell_meta_unique, na.rm=TRUE))
order_of_development <- order(match(cell_meta,cell_meta_unique),na.rm=TRUE)
unique(cell_meta)
install_github('kkdey/tmcmcR')
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
pdf_component <- function(x) { out <- dnorm(x,0,1,log=TRUE); return(out)}
temp <- select_inverse_temp(pdf_component, minbeta=0.05, L_iter =50, sim_method = "RWMH", inv_temp_scheme="randomized")
install_github('kkdey/tmcmcR')
library(tmcmcR)
pdf_component <- function(x) { out <- dnorm(x,0,1,log=TRUE); return(out)}
temp <- select_inverse_temp(pdf_component, minbeta=0.05, L_iter =50, sim_method = "RWMH", inv_temp_scheme="randomized")
