library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
sessionInfo()
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(Rcpp)
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(tmcmcR2)
tmcmcR2:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
install_github('kkdey/tmcmcR')
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
install_github('kkdey/tmcmcR2')
library(tmcmcR2)
tmcmcR2:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
tmcmcR:::rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
remove.packages("tmcmcR")
install_github('kkdey/tmcmcR')
library(tmcmcR)
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
tmcmcR:::rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(devtools)
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(3,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::adapt_tmcmc_metrop(pdf,base=base, nsamples=5000, method="Atchade", verb=FALSE)$chain
install_github('kkdey/tmcmcR')
library(tmcmcR)
unipdf <- function(x) return (dnorm(x,0,1,log=TRUE))
d <- 1
nsamples <- 5000;
base <- 0
temp <- tmcmcR:::tmcmc_metrop(unipdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
temp1 <- tmcmcR:::.rand_generate(unipdf, method="TMCMC")
inv_temp_fixed_tmcmc <- tmcmcR:::select_inverse_temp(unipdf, minbeta=0.05, L_iter =50, sim_method="TMCMC", inv_temp_scheme="fixed")
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
rm(list=ls())
library(data.table)
#install_github('kkdey/maptpx') otherwise shows error
library(maptpx)
library(CountClust)
install.packages("data.table")
install.packages("maptpx")
library(devtools)
install_github("kkdey/CountClust")
install.packages("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
library(limma)
install_github("kkdey/CountClust")
install_github("kkdey/CountClust")
library(CountClust)
rm(list=ls())
library(data.table)
#install_github('kkdey/maptpx') otherwise shows error
library(maptpx)
library(CountClust)
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell";
cell_meta[grep("8cell_2pooled", files)]="8cell";
cell_meta[grep("8cell_split", files)]="8cell";
cell_meta[grep("16cell_2pooled", files)]="16cell";
cell_meta[grep("16cell_split", files)]="16cell";
cell_meta
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
dim(reads)
reads[1:5,1:5]
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell";
cell_meta[grep("8cell_2pooled", files)]="8cell";
cell_meta[grep("8cell_split", files)]="8cell";
cell_meta[grep("16cell_2pooled", files)]="16cell";
cell_meta[grep("16cell_split", files)]="16cell";
cell_meta
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast")
indices_not_reqd
cell_meta[indices_not_reqd]
cell_meta <- cell_meta[-indices_not_reqd];
length(cell_meta)
dim(reads)
reads <- reads[,-indices_not_reqd];
dim(reads)
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell","16cell","earlyblast","midblast","lateblast") ;
order_of_development <- order(match(cell_meta,cell_meta_unique))
order_of_development
cell_meta <- cell_meta[order_of_development]
cell_meta
reads <- reads[,order_of_development];
colnames(reads) <- cell_meta;
samp_metadata <- cbind.data.frame(cell_meta);
counts <- t(reads);
colnames(samp_metadata) <- c("cell_type");
if(!dir.exists("../figures/deng_structure")) dir.create("../figures/deng_structure")
nclus_vec <- 2:7;
if(file.exists("../../project/rdas/deng_topic_fit.rda")) {
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
} else {
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
}
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
install_github('kkdey/maptpx')
remove.packages("maptpx")
install_github('kkdey/maptpx')
nclus <- 2
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
dim(docweights)
path_struct = "../figures/deng_structure"
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus+1)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
path_struct = "../figures/deng_structure"
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
grep("smartseq2", files)
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("smartseq2", files)]
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights[1:3,]
colnames(docweights)
rownames(docweights)
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
samp_metadata <- cbind.data.frame(rownames(docweights));
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
samp_metadata <- cbind.data.frame(cell_meta);
counts <- t(reads);
colnames(samp_metadata) <- c("cell_type");
if(!dir.exists("../figures/deng_structure")) dir.create("../figures/deng_structure")
nclus_vec <- 2:7;
if(file.exists("../../project/rdas/deng_topic_fit.rda")) {
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
} else {
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
}
path_struct = "../figures/deng_structure"
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell";
cell_meta[grep("8cell_2pooled", files)]="8cell";
cell_meta[grep("8cell_split", files)]="8cell";
cell_meta[grep("16cell_2pooled", files)]="16cell";
cell_meta[grep("16cell_split", files)]="16cell";
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast");
cell_meta <- cell_meta[-indices_not_reqd];
reads <- reads[,-indices_not_reqd];
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell","16cell","earlyblast","midblast","lateblast") ;
order_of_development <- order(match(cell_meta,cell_meta_unique))
reads <- reads[,order_of_development];
cell_meta <- cell_meta[order_of_development]
colnames(reads) <- cell_meta;
samp_metadata <- cbind.data.frame(cell_meta);
counts <- t(reads);
colnames(samp_metadata) <- c("cell_type");
if(!dir.exists("../figures/deng_structure")) dir.create("../figures/deng_structure")
nclus_vec <- 2:7;
if(file.exists("../../project/rdas/deng_topic_fit.rda")) {
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
} else {
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
}
path_struct = "../figures/deng_structure"
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
samp_metadata <- cbind.data.frame(cell_meta);
counts <- t(reads);
colnames(samp_metadata) <- c("dev_phase");
if(!dir.exists("../figures/deng_structure")) dir.create("../figures/deng_structure")
nclus_vec <- 2:7;
if(file.exists("../../project/rdas/deng_topic_fit.rda")) {
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
} else {
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
}
path_struct = "../figures/deng_structure"
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
