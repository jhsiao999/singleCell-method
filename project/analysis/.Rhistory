), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 13
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 12
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 11
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 10
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 9
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 8
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 7
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 6
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 5
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 4
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 3
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 2
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 1
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
Inf
Inf > Inf
-Inf > -Inf
data= data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gtex_thinned_version_1.txt'))[,-1];
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt");
test_indices <- which(samples_id[,3]=='Heart - Left Ventricle' | samples_id[,3]=='Muscle - Skeletal');
test_indices_sampled <- sample(test_indices, 50, replace=FALSE);
samples <- data[,test_indices_sampled];
col = c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)), rgb(1,seq(1,0,length=15),seq(1,0,length=15)));
library(data.table)
library(limma)
library(philentropy)
library(maptpx)
data= data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gtex_thinned_version_1.txt'))[,-1];
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt");
test_indices <- which(samples_id[,3]=='Heart - Left Ventricle' | samples_id[,3]=='Muscle - Skeletal');
test_indices_sampled <- sample(test_indices, 50, replace=FALSE);
samples <- data[,test_indices_sampled];
col = c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)), rgb(1,seq(1,0,length=15),seq(1,0,length=15)));
png(filename="../plots/heart_muscle_hierarchical_heatmap_average.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="average"));
dev.off()
librray(gplots)
library(gplots)
png(filename="../plots/heart_muscle_hierarchical_heatmap_average.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="average"));
dev.off()
png(filename="../plots/heart_muscle_hierarchical_heatmap_complete.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="complete"));
dev.off()
install_github('kkdey/tmcmcR')
library(devtools)
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
base=rnorm(d,0,1);
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x,mu_target, Sigma_target)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
install_github('kkdey/tmcmcR')
library(tmcmcR)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
source('~/Documents/singleCell-method/project/R/cell_order/cell_cycle_sim.R')
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
atan3 <- function(beta2, beta1)
{
if (beta1 > 0)
v <- atan(beta2/beta1);
if(beta2 >=0 & beta1 <0)
v <- pi + atan(beta2/beta1);
if(beta2 <0 & beta1 <0)
v <- -pi + atan(beta2/beta1);
if(beta2 >0 & beta1==0)
v <- pi/2;
if(beta2 <0 & beta1==0)
v <- - (pi/2);
if (v < 0)
v <- v + 2*pi;
# print(v)
#  print(beta1)
#  print(beta2)
return(v)
}
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
sigma <- array(0,G);
amp <- array(0,G); phi <- array(0,G);
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
library(parallel)
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
lmfit_list[[1]]
lmfit_list[[1]]$out_amp
amp <- unlist(lapply(lmfit_list, function(n) return(lmfit_list[[n]]$out_amp)));
amp <- unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp)));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
phi <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_phi))));
amp[1]
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
}
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
amp[1]
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycler)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
out <- get(load(file="../rdas/cell_order_ipsc.rda"));
out <- get(load(file="../rdas/cell_order_ipsc.rda"));
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
out <- get(load(file="../rdas/cell_order_ipsc.rda"));
out$amp
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
library(CountClust)
library(data.table)
library(maptpx)
library(gplots)
library(philentropy)
library(dplyr)
library(edgeR)
library(qtlcharts)
library(limma)
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
quality_single_cells <- scan("../data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('../data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
## Remove ERCC genes and genes with max molecule numer larger than 1024
ii_nonERCC <- grep("ERCC", rownames(molecules_single), invert = TRUE)
molecules_single <- molecules_single[ii_nonERCC,];
ii_notOverexpressed <- apply(molecules_single, 2, function(x) any(x < 1024) )
molecules_single <- molecules_single[ii_notOverexpressed,];
dim(molecules_single)
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs=unique(unlist(lapply(1:5, function(k) match(cell_cycle_genes_list[[k]],rownames(molecules_single)))));
labs = labs[!is.na(labs)];
molecules_single_cell_cycle <- molecules_single[labs,];
counts_data <- t(molecules_single);
individual_id <- sapply(1:length(rownames(counts_data)), function(x) strsplit(rownames(counts_data)[x],"[.]")[[1]][1]);
batch_id <- sapply(1:length(rownames(counts_data)), function(x) strsplit(rownames(counts_data)[x],"[.]")[[1]][2]);
individual.batch.id <- paste0(individual_id,"_", batch_id);
batch_corrected_counts <- BatchCorrectedCounts(counts_data,individual.batch.id);
dim(batch_corrected_counts)
write.table(batch_corrected_counts,"../data/batch_removed_counts_all_genes.txt");
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- read.table("../data/batch_removed_counts_all_genes.txt");
cycle_counts_data <- t(molecules_single);
dim(cycle_counts_data)
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"));
dim(molecules_single)
molecules_single[1:5,1:5]
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
molecules_single[1:5,1:5]
dim(molecules_single)
cycle_counts_data <- t(molecules_single);
dim(cycle_counts_data)
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single <- data.frame(fread("../data/batch_removed_counts_all_genes.txt"), row.names=1);
cycle_counts_data <- molecules_single;
dim(cycle_counts_data)
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
celltime_levels <- 100;
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=100, save_path="../rdas/cell_order_ipsc_full.rda")
library(qtlcharts)
library(CountClust)
library(parallel)
library(cellcycleR)
library(data.table)
library(binhf)
library(vioplot)
library(limma)
library(readxl)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=100, save_path="../rdas/cell_order_ipsc_full.rda")
out <- get(load(file="../rdas/cell_order_ipsc_full.rda"));
cell_order_full <- cell_ordering_full(out$signal_intensity, dim(cycle_data_norm)[2])
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 3);
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
top_genes <- which(SNR > 10);
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
snr_high_indices <- which(SNR > 3);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
out2 <- cell_ordering_class(cycle_data_norm_sinusoidal, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_sinusoidal.rda")
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal.rda"));
cell_order_full <- cell_ordering_full(out2$signal_intensity, dim(cycle_data_norm_sinusoidal)[2])
amp_genes <- out2$amp;
sd_genes <- out2$sigma;
phi_genes <- out2$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 0.5);
new_cell_order <- shift(order(cell_order_full),40,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
new_cell_order <- shift(order(cell_order_full),0,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
new_cell_order <- shift(order(cell_order_full),-50,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
new_cell_order <- shift(order(cell_order_full),-100,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
