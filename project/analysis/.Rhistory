cormat <- cor(mat);
det(cormat)
out <- as.matrix(ash_cor(cormat,M))
det(out)
R <- matrix(runif(10000), ncol=100)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
dim(cormat)
out <- as.matrix(ash_cor(cormat,M))
out <- as.matrix(ash_cor(cormat,nsamples=20))
cormat[1:5,1:5]
cor_table <- melt(cormat);
cor_table_non_diag <- cor_vec[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_vec_non_diag[,3])/(1-cor_vec_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_vec_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
length(ash_cor_vec)
rm(list=ls())
library(ashr)
library(reshape)
library(reshape2)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_vec[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_vec_non_diag[,3])/(1-cor_vec_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_vec_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
return(new_mat)
}
M =10;
N =15;
R <- matrix(runif(10000), ncol=100)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
out <- as.matrix(ash_cor(cormat,nsamples=20))
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_vec_non_diag[,3])/(1-cor_vec_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_vec_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
M =10;
N =15;
R <- matrix(runif(10000), ncol=100)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
out <- as.matrix(ash_cor(cormat,nsamples=20))
det(out)
library(ashr)
library(reshape)
library(reshape2)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
M =10;
N =15;
R <- matrix(runif(10000), ncol=100)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
out <- as.matrix(ash_cor(cormat,nsamples=20))
det(out)
det(cormat)
out[1:5,1:5]
cormat[1:5,1:5]
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- as.matrix(ash_cor(cormat,nsamples=10))
det(out)
out[1:5,1:5]
cormat[1:5,:5]
cormat[1:5,1:5]
library(ashr)
library(reshape)
library(reshape2)
library(Matrix)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
new_mat <- nearPD(new_mat);
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- as.matrix(ash_cor(cormat,nsamples=10))
det(out)
install.packages("Matrix")
install.packages("Matrix")
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
new_mat <- nearPD(new_mat);
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- as.matrix(ash_cor(cormat,nsamples=10))
det(out)
library(ashr)
library(reshape)
library(reshape2)
library(Matrix)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
new_mat <- nearPD(as.matrix(new_mat));
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- ash_cor(cormat,nsamples=10)
det(out)
library(ashr)
library(reshape)
library(reshape2)
library(Matrix)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
new_mat <- nearPD(as.matrix(new_mat), conv.tol=1e-06);
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- ash_cor(cormat,nsamples=10)
det(out)
out
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- ash_cor(cormat,nsamples=10)$mat
det(out)
R[1:6,1:6]
out[1:6,1:6]
sweep(new_mat,diag(new_mat), MARGIN=1,"/")
library(ashr)
library(reshape)
library(reshape2)
library(Matrix)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
new_mat <- nearPD(as.matrix(new_mat), conv.tol=1e-06)$mat;
sweep(new_mat,diag(new_mat), MARGIN=1,"/")
return(new_mat)
}
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- ash_cor(cormat,nsamples=10)$mat
det(out)
out <- ash_cor(cormat,nsamples=10)
out
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
nsamples <- 10''
nsamples <- 10
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
new_mat <- nearPD(as.matrix(new_mat), conv.tol=1e-06);
new_mat[1:5,1:5]
new_mat$mat[1:5,1:5]
sweep(new_mat,diag(new_mat), MARGIN=2,"/")
sweep(new_mat$mat,diag(new_mat$mat), MARGIN=2,"/")
library(ashr)
library(reshape)
library(reshape2)
library(Matrix)
## The correlation matrix ash framework
ash_cor <- function(cormat, nsamples)
{
cor_table <- melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] !=cor_table[,2]),];
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag[,3])/(1-cor_table_non_diag[,3]))
cor_transform_sd_vec=rep(sqrt(1/(nsamples-3)), dim(cor_table_non_diag)[1]);
options(warn=-1)
fit=ash(cor_transform_mean_vec,cor_transform_sd_vec,mixcompdist="normal");
ash_cor_vec=(exp(2*fit$PosteriorMean)-1)/(exp(2*fit$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
new_mat <- dcast(newdata.table, X1~X2, value.var = "value")[,-1];
new_mat[is.na(new_mat)]=1;
pd_completion <- nearPD(as.matrix(new_mat), conv.tol=1e-06);
new_mat <- sweep(pd_completion$mat,diag(pd_completion$mat), MARGIN=2,"/")
return(new_mat)
}
### Testing positive definiteness of the ash_cor correlation matrix
R <- matrix(runif(400), ncol=20)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
cormat <- R
det(cormat)
out <- ash_cor(cormat,nsamples=10)
det(out)
R
d = 100;
k = 5;
W = sample(1:d,k);
S = W*t(W) + diag(rep(1,d));
S = diag(1/sqrt(diag(S))) %*% S %*% diag(1/sqrt(diag(S)));
cormat <- S
install.packages("ClusterGeneration")
install.packages("clusterGeneration")
library(clusterGeneration)
cormat <- rcorrmatrix(d=100,alphad=1)
det(cormat)
out <- ash_cor(cormat,nsamples=10)
det(out)
out[1:5,1:5]
cormat[1:5,1:5]
out[1:10,1:10]
library(clusterGeneration)
cormat <- rcorrmatrix(d=100,alphad=5)
det(cormat)
out <- ash_cor(cormat,nsamples=10)
det(out)
out[1:5,1:5]
R <- matrix(runif(16), ncol=4)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
eigen(R)$val
Q <- nearPD(R, posd.tol=1.e-04)$mat
det(Q)
out <- ash_cor(cormat,nsamples=10)
det(out)
cormat <- Q
out <- ash_cor(cormat,nsamples=10)
class(Q)
cormat <- as.matrix(Q)
cormat
out <- ash_cor(cormat,nsamples=10)
det(out)
out[1:5,1:5]
out
cormat
R <- matrix(runif(16), ncol=4)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
eigen(R)$val
Q <- nearPD(R, posd.tol=1.e-04)$mat
det(Q)
cormat <- as.matrix(Q)
out <- ash_cor(cormat,nsamples=10)
det(out)
out
cormat
R <- matrix(runif(16), ncol=4)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
eigen(R)$val
Q <- nearPD(R, posd.tol=1.e-04)$mat
det(Q)
cormat <- as.matrix(Q)
out <- ash_cor(cormat,nsamples=10)
det(out)
out[1:5,1:%]
out[1:5,1:5]
out
cormat
R <- matrix(runif(16), ncol=4)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
eigen(R)$val
Q <- nearPD(R, posd.tol=1.e-04)$mat
det(Q)
cormat <- as.matrix(Q)
out <- ash_cor(cormat,nsamples=10)
det(out)
out
cormat
R <- matrix(runif(16), ncol=4)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
eigen(R)$val
Q <- nearPD(R, posd.tol=1.e-04)$mat
Q
Q <- sweep(Q,diag(Q), MARGIN=2,"/")
Q
0.3035671/1.0010862
0.3035671/1.00797
R <- matrix(runif(16), ncol=4)
R <- (R * lower.tri(R)) + t(R * lower.tri(R))
diag(R) <- 1
eigen(R)$val
Q <- nearPD(R, posd.tol=1.e-04)$mat
Q <- sweep(Q,diag(Q), MARGIN=1,"/")
det(Q)
Q
cormat <- as.matrix(Q)
out <- ash_cor(cormat,nsamples=10)
det(out)
out
setwd("/Users/kushal/Documents/singleCell-method/project/analysis/")
data <- read.csv("../data/Monocle data/GSE52529_fpkm_matrix.txt")
data <- read.table("../data/Monocle data/GSE52529_fpkm_matrix.txt")
dim(data)
data[1:5,1:5]
cellcycle_genes <- as.vector(read.table("../data/cellcyclegenes.txt"));
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
dim(cell_cycle_genes)
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs <- unique(unlist(lapply(1:5, function(k) X =
match(cell_cycle_genes_list[[k]],
rownames(data)))) )
labs
cell_cycle_genes_list[[1]]
rownames(data)
strsplit(gene_names[1],".")
gene_names[1]
gene_names <- rownames(data);
gene_names[1]
strsplit(gene_names[1],".")
strsplit(gene_names[1],"\.")
strsplit(gene_names[1],"/.")
strsplit(gene_names[1]," .")
strsplit(gene_names[1],"[.]")
strsplit(gene_names[1],"[.]")[[1]][1]
lapply(gene_names,function(x) strsplit(x,"[.]")[[1]][1])
unlist(lapply(gene_names,function(x) strsplit(x,"[.]")[[1]][1]))
gene_names
unlist(lapply(gene_names,function(x) strsplit(x,"[.]")[[1]][1]))
setwd("/Users/kushal/Documents/singleCell-method/project/analysis/")
data <- read.table("../data/Monocle data/GSE52529_fpkm_matrix.txt")
gene_names <- rownames(data);
gene_names <- unlist(lapply(gene_names,function(x) strsplit(x,"[.]")[[1]][1]))
cycle_counts_data <- t(data);
dim(cycle_counts_data)
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs <- unique(unlist(lapply(1:5, function(k) X =
match(cell_cycle_genes_list[[k]],
rownames(data)))) )
labs
labs <- unique(unlist(lapply(1:5, function(k) X =
match(cell_cycle_genes_list[[k]],
gene_names))))
labs
dim(cycle_counts_data)
labs <- labs[!is.na(labs)];
cycle_counts_data <- cycle_counts_data[,labs]
dim(cycle_counts_data)
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
celltime_levels <- 100;
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=100, save_path="../rdas/cell_order_monocle.rda")
library(qtlcharts)
library(CountClust)
library(parallel)
library(cellcycleR)
library(data.table)
library(binhf)
library(vioplot)
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=100, save_path="../rdas/cell_order_monocle.rda")
out <- get(load(file="../rdas/cell_order_monocle.rda"));
cell_order_full <- cell_ordering_full(out$signal_intensity, dim(cycle_data_norm)[2])
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 3);
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
