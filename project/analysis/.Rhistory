{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
}
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
amp[1]
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycler)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
dim(cycle_counts_data)
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
celltime_levels <- 100;
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
library(qtlcharts)
library(CountClust)
library(parallel)
library(cellcycleR)
library(data.table)
library(binhf)
library(vioplot)
library(limma)
library(readxl)
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
celltime_levels <- 100;
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
dim(cycle_data_norm)
cell_phase_vector <- as.vector(as.matrix(read.table("../../data/cell_phase_vector_yoav.txt")));
cell_phase_vector <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
out <- cell_ordering_class(cycle_data_norm, celltime_levels = 100, num_iter=100, save_path="../rdas/cell_order_ipsc.rda")
out <- get(load(file="../rdas/cell_order_ipsc.rda"));
cell_order_full <- cell_ordering_full(out$signal_intensity, dim(cycle_data_norm)[2])
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 3);
iplotCurves(t(cycle_data_norm[order(cell_order_full),top_genes]))
cell_phases
cell_phases <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
table(cell_phases)
vioplot(cell_order_full[which(cell_phases=="G1.S")],
cell_order_full[which(cell_phases=="S")],
cell_order_full[which(cell_phases=="G2.M")],
cell_order_full[which(cell_phases=="M")],
cell_order_full[which(cell_phases=="M.G1")],
names=c("G1","S","G2M","M","M.G1"),
col="red")
iplotCurves(t(cycle_data_norm[c(which(cell_phases=="G1"),which(cell_phases=="S"), which(cell_phases=="G2.M"),which(cell_phases=="M"),which(cell_phases=="M.G1")),top_genes]))
snr_high_indices <- which(SNR > 1);
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
out2 <- cell_ordering_class(cycle_data_norm_sinusoidal, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_sinusoidal.rda")
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal.rda"));
cell_order_full <- cell_ordering_full(out2$signal_intensity, dim(cycle_data_norm_sinusoidal)[2])
amp_genes <- out2$amp;
sd_genes <- out2$sigma;
phi_genes <- out2$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 0.5);
new_cell_order <- shift(order(cell_order_full),40,dir="right")
iplotCurves(t(cycle_data_norm_sinusoidal[new_cell_order,top_genes]))
vioplot(cell_order_full[which(cell_phases=="G1.S")],
cell_order_full[which(cell_phases=="S")],
cell_order_full[which(cell_phases=="G2.M")],
cell_order_full[which(cell_phases=="M")],
cell_order_full[which(cell_phases=="M.G1")],
names=c("G1","S","G2M","M","M.G1"),
col="red")
setwd('/Users/kushal/Documents/structured-hp/src/')
theta_topics <- read.table('../internal_data/theta_cis_genes_0_1_2.txt');
dim(theta_topics)
omega_topics <- read.table('../internal_data/omega_cis_genes_0_1_2.txt');
dim(omega_topics)
theta_topics[1:5,1:5]
omega_topics[1:5,1:5]
colSums(omega_topics)
is(rowSums(omega_topics)==rep(1,dim(omega_topics)[2]))
(rowSums(omega_topics)==rep(1,dim(omega_topics)[2]))
rowSums(omega_topics)
dim(omega_topics)[2]
(rowSums(omega_topics)==rep(1,dim(omega_topics)[1]))
(rowSums(omega_topics))
head(rowSums(omega_topics))
head(colSums(theta_topics))  ### should be all 1s
head(as.numeric(rowSums(omega_topics)))  ### should be all 1s
head(as.numeric(colSums(theta_topics)))  ### should be all 1s
tissue_expr <- omega_topics %*% theta_topics;
dim(omega_topics)
dim(theta_topics)
tissue_expr <- omega_topics %*% t(theta_topics);
omega_topics[1:5,1:5]
theta_topics[1:5,1:5]
theta_topics <- as.matrix(theta_topics);
omega_topics <- as.matrix(omega_topics);
tissue_expr <- omega_topics %*% t(theta_topics);
dim(tissue_expr)
rowSums(tissue_expr[1:3,])
samples_id <- as.vector(read.table("../internal_data/samples_id.txt"));
samples_id
tissue_expr.frame <- cbind.data.frame(tissue_expr. tissue_ids)
tissue_expr.frame <- cbind.data.frame(tissue_expr, tissue_ids)
tissue_ids <- samples_id[,3];
tissue_expr.frame <- cbind.data.frame(tissue_expr, tissue_ids)
colnames(tissue_expr)
colnames(tissue_expr.frame)
tail(colnames(tissue_expr.frame))
tissue_samples_expr.frame <- cbind.data.frame(tissue_expr, tissue_ids)
tissue_expr.frame <- tissue_samples_expr.frame %>% group_by(tissue_ids) %>% summarise_each(funs(mean))
library(dplyr)
tissue_expr.frame <- tissue_samples_expr.frame %>% group_by(tissue_ids) %>% summarise_each(funs(mean))
dim(tissue_expr.frame)
tissue_expr.frame[1:5,1:5]
tail(tissue_expr.frame)
tail(tissue_expr.frame)
tissue_expr.frame <- data.frame(tissue_expr.frame);
dim(tissue_expr.frame)
tissue_expr.frame <- data.frame(tissue_expr.frame, rownames=1);
dim(tissue_expr.frame)
tissue_expr.frame[1:5,1:5]
tissue_expr.frame <- data.frame(tissue_expr.frame, rownames=-1);
tissue_expr.frame[1:5,1:5]
dim(tissue_expr.frame)
tissue_expr.frame <- data.frame(tissue_expr.frame);
dim(tissue_expr.frame)
tissue_expr.tbl <- tissue_samples_expr.frame %>% group_by(tissue_ids) %>% summarise_each(funs(mean))
tissue_expr.frame <- data.frame(tissue_expr.tbl);
dim(tissue_expr.frame)
tissue_expr.frame[1:5,1:5]
tissue_expr.frame <- data.frame(tissue_expr.tbl, rownames=1);
tissue_expr.frame[1:5,1:5]
tissue_expr.frame <- data.frame(tissue_expr.tbl, row.names=1);
tissue_expr.frame[1:5,1:5]
dim(tissue_expr.frame)
save(tissue_expr.frame, filename = "../rdas/tissue_expr_profile.rda")
save(tissue_expr.frame,file = "../rdas/tissue_expr_profile.rda")
tissue_expr.frame <- get(load('../rdas/tissue_expr_profile.rda'));
dim(tissue_expr.frame)
tissue_expr.frame[1:4,1:4]
logit_tissue_expr.frame <- apply(tissue_expr.frame, 1, function(x) log(x/x[1]));
logit_tissue_expr.frame[1:4,1:4]
logit_tissue_expr.frame <- t(apply(tissue_expr.frame, 1, function(x) log(x/x[1])));
logit_tissue_expr.frame[1:4,1:4]
new_frame <- logit_tissue_expr.frame[,-num];
num <- 1;
new_frame <- logit_tissue_expr.frame[,-num];
dim(new_frame)
library(ashr)
ash_frame <- t(apply(new_frame, 1, function(x) ash(x,rep(1,length(x)))));
dim(ash_frame)
ash_frame
ash_frame[[1]]
?"ashr-package"
ash_frame <- t(apply(new_frame, 1, function(x) return ash(x,rep(1,length(x)))$PosteriorMean));
ash_frame <- t(apply(new_frame, 1, function(x) return (ash(x,rep(1,length(x)))$PosteriorMean)));
dim(ash_frame)
ash_frame[1:4,1:4]
ash_frame_combnd <- cbind(logit_tissue_expr.frame[,num], ash_frame);
dim(ash_frame_combnd)
ash_frame_combined[1:4,1:4]
ash_frame_combnd[1:4,1:4]
logit_tissue_expr.frame[1:4,1:4]
revived_frame <- t(apply(ash_frame_combnd, 1, function(x) return(scale*exp(x))));
scale <- tissue_expr.frame[,num];
revived_frame <- t(apply(ash_frame_combnd, 1, function(x) return(scale*exp(x))));
revived_frame <- t(lapply(1:dim(ash_frame_combnd)[1], function(n) return(scale[n]*exp(ash_frame_combnd[n,]))));
dim(revived_frame)
revived_frame <- do.call(rbind, lapply(1:dim(ash_frame_combnd)[1], function(n) return(scale[n]*exp(ash_frame_combnd[n,]))));
dim(revived_frame)
revived_frame[1:4,1:4]
tissue_expr.frame[1:4,1:4]
num <- sample(1:dim(tissue_expr.frame)[2]);
num
num <- sample(1:dim(tissue_expr.frame)[2],1);
num
revived_frame <- vector("list",10);
revived_frame[[1]]
revived_frame[[10]]
tissue_expr.frame <- get(load('../rdas/tissue_expr_profile.rda'));
Num_iter <- 10 ## number of iterations chosen as we do not want the logit transform to be dependent on base
library(ashr)
revived_frame <- vector("list",Num_iter);
for(num in 1:Num_iter)
{
num <- sample(1:dim(tissue_expr.frame)[2],1);
## We perform logit transform on the values to remove the constraints
logit_tissue_expr.frame <- t(apply(tissue_expr.frame, 1, function(x) log(x/x[num])));
new_frame <- logit_tissue_expr.frame[,-num];
## Then apply ash on the transformed varaibles.
ash_frame <- t(apply(new_frame, 1, function(x) return (ash(x,rep(1,length(x)))$PosteriorMean)));
ash_frame_combnd <- cbind(logit_tissue_expr.frame[,num], ash_frame);
## Transform back
scale <- tissue_expr.frame[,num];
revived_frame[[num]] <- do.call(rbind, lapply(1:dim(ash_frame_combnd)[1], function(n) return(scale[n]*exp(ash_frame_combnd[n,]))));
}
tissue_expr.frame <- get(load('../rdas/tissue_expr_profile.rda'));
Num_iter <- 10 ## number of iterations chosen as we do not want the logit transform to be dependent on base
library(ashr)
revived_frame <- vector("list",Num_iter);
for(n in 1:Num_iter)
{
base <- sample(1:dim(tissue_expr.frame)[2],1);
## We perform logit transform on the values to remove the constraints
logit_tissue_expr.frame <- t(apply(tissue_expr.frame, 1, function(x) log(x/x[base])));
new_frame <- logit_tissue_expr.frame[,-base];
## Then apply ash on the transformed varaibles.
ash_frame <- t(apply(new_frame, 1, function(x) return (ash(x,rep(1,length(x)))$PosteriorMean)));
ash_frame_combnd <- cbind(logit_tissue_expr.frame[,base], ash_frame);
## Transform back
scale <- tissue_expr.frame[,base];
revived_frame[[n]] <- do.call(rbind, lapply(1:dim(ash_frame_combnd)[1], function(n) return(scale[n]*exp(ash_frame_combnd[n,]))));
cat("We are at iter:", n)
}
revived_frame_pooled <- Reduce("+", revived_frame) / length(revived_frame)
dim(revived_frame_pooled)
revived_frame_pooled[1:5,1:5]
tissue_expr.frame[1:5,1:5]
save(revived_frame_pooled, file="../rdas/ash_expr_profile.rda")
tissue_expr.frame <- get(load('../rdas/tissue_expr_profile.rda'))
ash_tissue_expr.frame <- get(load('../rdas/ash_expr_profile.rda'))
dim(tissue_expr.frame)
dim(ash_tissue_expr.frame)
tissue_cor_matrix <- cor(t(tissue_expr.frame));
dim(tissue_cor_matrix)
ash_tissue_cor_matrix <- cor(t(ash_tissue_expr.frame))
heatmap(tissue_cor_matrix)
heatmap(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),rgb(1,seq(1,0,length=5),seq(1,0,length=5))))
tissue_cor_matrix
tissue_cor_matrix[8:16,8:!6]
tissue_cor_matrix[8:16,8:16]
heatmap(tissue_cor_matrix, col=c(rgb(seq(1,0,length=5),seq(1,0,length=5),1)
rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5)),
))
heatmap(tissue_cor_matrix, col=c(rgb(seq(1,0,length=5),seq(1,0,length=5),1),
rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
))
image(tissue_cor_matrix, col=c(rgb(seq(1,0,length=5),seq(1,0,length=5),1),
rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
))
r <- heatmap(tissue_cor_matrix);
image(r, col=c(rgb(seq(1,0,length=5),seq(1,0,length=5),1),
rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
))
r <- heatmap(tissue_cor_matrix)$ordering;
r
heatmap(tissue_cor_matrix)$ordering;
distance <- tissue_cor_matrix
cluster     = hclust(distance, method="ward")
dendrogram  = as.dendrogram(cluster)
image(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
))
heatmap.2(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
))
library(gplots)
heatmap.2(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
))
heatmap.2(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
),
scale="row", key=T, keysize=1.5,
density.info="none", trace="none",cexCol=0.9)
heatmap.2(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
),
key=T, keysize=1.5,
density.info="none", trace="none",cexCol=0.9)
par(mar=c(6,6,2,2))
heatmap.2(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
),
key=T, keysize=1.5,
density.info="none", trace="none",cexCol=0.9)
tissue_cor_matrix[1:5,1:5]
par(mar=c(6,6,2,2))
heatmap.2(ash_tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
),
key=T, keysize=1.5,
density.info="none", trace="none",cexCol=0.9)
save(tissue_cor_matrix, "../rdas/tissue_relatedness_matrix_noash.rda");
tissue_expr.frame <- get(load('../rdas/tissue_expr_profile.rda'))
ash_tissue_expr.frame <- get(load('../rdas/ash_expr_profile.rda'))
tissue_cor_matrix <- cor(t(tissue_expr.frame));
ash_tissue_cor_matrix <- cor(t(ash_tissue_expr.frame))
par(mar=c(6,6,2,2))
heatmap.2(tissue_cor_matrix, col=c(rgb(seq(0,1,length=5),1,seq(0,1,length=5)),
rgb(1,seq(1,0,length=5),seq(1,0,length=5))
),
key=T, keysize=1.5,
density.info="none", trace="none",cexCol=0.9)
## Save the matrix to file
save(tissue_cor_matrix, file="../rdas/tissue_relatedness_matrix_noash.rda");
samples <- colnames(tissue_relatedness_matrix);
tissue_relatedness_matrix <-  get(load('../rdas/tissue_relatedness_matrix_noash.rda'));
samples <- colnames(tissue_relatedness_matrix);
samples
grep("Brain", samples)
samples[grep("Brain", samples)]
brain_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], tissue_relatedness_matrix[2]);
dim(brain_matrix)
brain_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
dim(brain_matrix)
brain_matrix[brain_indices, brain_indices]=1;
brain_indices <- grep("Brain", samples)
brain_matrix[brain_indices, brain_indices]=1;
brain_matrix
skin_indices <- grep("Skin", samples)
skin_indices
heart_indices <- grep("Heart", samples)
heart_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
heart_matrix[heart_indices, heart_indices]=1;
heart_indices
artery_indices <- c(grep("Artery", samples), grep("Esophagus", samples), grep("Uterus", samples));
artery_indices
grep("Esophagus", samples)
samples[grep("Esophagus", samples)]
artery_indices <- c(grep("Artery", samples), grep("Esophagus", samples)[1], grep("Esophagus", samples)[3], grep("Uterus", samples));
artery_indices
artery_indices <- c(grep("Artery", samples), grep("Esophagus", samples)[1], grep("Esophagus", samples)[3], grep("Uterus", samples));
artery_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
artery_matrix[artery_indices, artery_indices]=1;
adipose_indices <- c(grep("Adipose", samples), grep("Nerve", samples), grep("Breast", samples));
adipose_indices
samples[adipose_indices]
adipose_matrix[adipose_indices,adipose_indices]
adipose_indices <- c(grep("Adipose", samples), grep("Nerve", samples), grep("Breast", samples));
adipose_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
adipose_matrix[adipose_indices, adipose_indices]=1;
adipose_matrix[adipose_indices,adipose_indices]
save(brain_matrix,file="../rdas/brain_relatedness_matrix")
save(skin_matrix,file="../rdas/skin_relatedness_matrix")
save(heart_matrix,file="../rdas/heart_relatedness_matrix")
save(artery_matrix,file="../rdas/artery_relatedness_matrix")
save(adipose_matrix,file="../rdas/adipose_relatedness_matrix")
tissue_relatedness_matrix <-  get(load('../rdas/tissue_relatedness_matrix_noash.rda'));
samples <- colnames(tissue_relatedness_matrix);
brain_indices <- grep("Brain", samples)
brain_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
brain_matrix[brain_indices, brain_indices]=1;
skin_indices <- grep("Skin", samples)
skin_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
skin_matrix[skin_indices, skin_indices]=1;
heart_indices <- grep("Heart", samples)
heart_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
heart_matrix[heart_indices, heart_indices]=1;
artery_indices <- c(grep("Artery", samples), grep("Esophagus", samples)[1], grep("Esophagus", samples)[3], grep("Uterus", samples));
artery_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
artery_matrix[artery_indices, artery_indices]=1;
adipose_indices <- c(grep("Adipose", samples), grep("Nerve", samples), grep("Breast", samples));
adipose_matrix <- matrix(0, dim(tissue_relatedness_matrix)[1], dim(tissue_relatedness_matrix)[2]);
adipose_matrix[adipose_indices, adipose_indices]=1;
save(brain_matrix,file="../rdas/brain_relatedness_matrix")
save(skin_matrix,file="../rdas/skin_relatedness_matrix")
save(heart_matrix,file="../rdas/heart_relatedness_matrix")
save(artery_matrix,file="../rdas/artery_relatedness_matrix")
save(adipose_matrix,file="../rdas/adipose_relatedness_matrix")
save(brain_matrix,file="../rdas/brain_relatedness_matrix.rda")
save(skin_matrix,file="../rdas/skin_relatedness_matrix.rda")
save(heart_matrix,file="../rdas/heart_relatedness_matrix.rda")
save(artery_matrix,file="../rdas/artery_relatedness_matrix.rda")
save(adipose_matrix,file="../rdas/adipose_relatedness_matrix.rda")
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal.rda"));
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal.rda"));
out2$cell_times
amp_genes <- out$amp;
sd_genes <- out$sigma;
phi_genes <- out$phi;
plot(density(phi_genes), col="red", main="Density plot of the phases")
plot(density(amp_genes[-which.max(amp_genes)]), col="red", main="Density plot of the amplitudes")
plot(density(sd_genes[-which.max(sd_genes)]), col="red", main="Density plot of the non-signal sd")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
plot(SNR, col="red", pch=20, lwd=1)
top_genes <- which(SNR > 3);
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data_norm <- apply(cycle_voom_data,2,function(x)  return (x-mean(x))/sd(x))
cycle_data_norm <- cycle_data_norm[, -which(colSums(cycle_data_norm)==0)]
cycle_data_norm_sinusoidal <- cycle_data_norm[,snr_high_indices];
dim(cycle_data_norm_sinusoidal)
colnames(cycle_data_norm_sinusoidal)
SNR[order(SNR, decreasing=TRUE)]
sinusoidal_gene_names <- colnames(cycle_data_norm_sinusoidal);
imp_genes <- sinusoidal_gene_names[order(SNR, decreasing=TRUE)]
imp_genes
sinusoidal_gene_names <- colnames(cycle_data_norm_sinusoidal);
imp_genes <- sinusoidal_gene_names[order(SNR, decreasing=TRUE)]
top_genes_100 <- imp_genes[1:100];
out <- queryMany(top_genes_100, scopes="symbol", fields=c("name", "summary"), species="human");
library(mygene)
out <- queryMany(top_genes_100, scopes="symbol", fields=c("name", "summary"), species="human");
out
out <- queryMany(top_genes_100,  scopes="ensembl.gene", fields=c("name", "summary"), species="human");
out
kable(as.data.frame(out))
out2 <- get(load(file="../rdas/cell_order_ipsc_sinusoidal.rda"));
cell_order_full <- cell_ordering_full(out2$signal_intensity, dim(cycle_data_norm_sinusoidal)[2])
fitted <- matrix(0, length(cell_order_full), length(amp_genes));
for(g in 1:length(amp_genes))
{
fitted[,g] <- amp_genes[g]*sin(cell_order_full+phi_genes[g])
}
dim(fitted)
residuals <- cycle_data_norm_sinusoidal - fitted;
iplotCurves(t(residuals))
