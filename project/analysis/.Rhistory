labels_up <- c(labels_low[2:length(labels_low)],dim(docweights_ordered)[1])
mid_point <- labels_low +0.5*(labels_up-labels_low)
axis(1, at = mid_point, unique(type_ordered), las = 2, cex.axis=0.3)
nclust <- length(topics_list)
type_info <- cell_phase_vector
topics_clust <- topics_list[[per_clust]]
clust <- topics_list$K
clust
topics_clust <- topics_list[[per_clust]]
clust <- topics_clust$K
docweights <- topics_clust$omega
type_ordered <- type_info[order(type_info)]
docweights_ordered <- docweights[order(type_info),]
barplot( t(docweights_ordered),
col = 2:(clust+1), axisnames = F,
space = 0, border=NA,
main = paste("No. of clusters=", per_clust), las = 1,
ylim = c(0,1), cex.axis = 0.3, cex.main=1.4)
labels <- match(unique(type_ordered), type_ordered)
abline(v=labels-1)
labels_low <- labels-1
labels_up <- c(labels_low[2:length(labels_low)],dim(docweights_ordered)[1])
mid_point <- labels_low +0.5*(labels_up-labels_low)
axis(1, at = mid_point, unique(type_ordered), las = 2, cex.axis=0.3)
topics_clust <- topics_list[[1]]
word_weights <- topic_clust$theta
word_weights <- topics_clust$theta
word_order <- order(word_weights[,1])
clust <- topics_clust$K
clust
plot(word_weights[ word_order, 1], type = "l", col = 1)
plot(word_weights[ word_order, 1], type = "l", col = 1)
for (i in 2:clust) {
lines(word_weights[ word_order, i], type = "l", col = i)
}
word_order <- order(word_weights[,1] - word_weights[,2])
plot(word_weights[ word_order, 1], type = "l", col = 1)
for (i in 2:clust) {
lines(word_weights[ word_order, i], type = "l", col = i)
}
?matplot
matplot(word_weights[word_order, ], type = "l")
word_order <- order(word_weights[,1] - word_weights[,2])
matplot(word_weights[word_order, ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by differences between two cluster weights",
main = "2 clusters")
topics_clust <- topics_list[[2]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
dim(word_weights)
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
matplot(word_weights[diff_vec, ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
summary(diff_vec)
matplot(word_weights[order(diff_vec), ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
head(word_weights)
head(exp_batch_removed_cpm_data)
str(exp_batch_removed_cpm)
str(batch_removed_cpm)
head(batch_removed_cpm)
head(cell_phase_vector)
dim(molecules_single_cell_cycle)
str(molecules_single_cell_cycle)
rownames(molecules_single_cell_cycle)
topics_clust <- topics_list[[1]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
word_order <- order(word_weights[,1] - word_weights[,2])
matplot(word_weights[word_order, ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by differences between two cluster weights",
main = "2 clusters")
word_order <- order(abs(word_weights[,1] - word_weights[,2]) )
matplot(word_weights[word_order, ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by differences between two cluster weights",
main = "2 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
save(rev(geneNames(word_order)),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt")
geneNames <- rownames(molecules_single_cell_cycle)
save(rev(geneNames(word_order)),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt")
geneNames(word_order)
geneNames <- rownames(molecules_single_cell_cycle)
geneNames(word_order)
save(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt")
geneNames[word_order]
rev(geneNames[word_order])
save(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt")
write.table(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt")
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt",
quote = FALSE)
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt",
quote = FALSE, col.names = FALSE)
tail(geneNames[word_order])
head(rev(geneNames[word_order]))
topics_clust <- topics_list[[2]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
matplot(word_weights[order(diff_vec), ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-3.txt",
quote = FALSE, col.names = FALSE)
topics_clust <- topics_list[[1]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
word_order <- order(abs(word_weights[,1] - word_weights[,2]) )
matplot(word_weights[word_order, ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by differences between two cluster weights",
main = "2 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-2.txt",
quote = FALSE, col.names = FALSE, row.names = FALSE)
topics_clust <- topics_list[[2]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
matplot(word_weights[order(diff_vec), ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[word_order]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-3.txt",
quote = FALSE, col.names = FALSE, row.names = FALSE)
topics_clust <- topics_list[[2]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
matplot(word_weights[order(diff_vec), ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[order(diff_vec)]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-3.txt",
quote = FALSE, col.names = FALSE, row.names = FALSE)
topics_clust <- topics_list[[2]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
matplot(word_weights[order(diff_vec), ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
write.table(rev(geneNames[order(diff_vec)]),
file = "../output/batch_effect_cell_cycle_genes/batch-corrected-clust-3.txt",
quote = FALSE, col.names = FALSE, row.names = FALSE)
biocLite("org.Hs.eg.db")
require(BiocInstaller)
biocLite("org.Hs.eg.db")
biocLite("annotate")
library(annotate)
library("org.Hs.eg.db")
?lookUp
?select
ls()
library(biomaRt)
biocLite("biomaRT")
biocLite("biomaRt")
library(biomaRt)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
results <- getBM(attributes = c("ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = "ENST00000296026",
mart = mart)
results
?getBM
results <- getBM(attributes = c("hgnc_symbol"),
filters = "ensembl_gene_id",
values = "ENST00000296026",
mart = mart)
results
results <- getBM(attributes = c("hgnc_symbol"),
filters = "ensembl_gene_id",
values = "ENSG00000296026",
mart = mart)
results
results <- getBM(attributes = c("hgnc_symbol"),
filters = "ensembl_gene_id",
values = "ENSG00000187097",
mart = mart)
results
library(biomaRt)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
results <- getBM(attributes = c("hgnc_symbol"),
filters = "ensembl_gene_id",
values = rev(geneNames[word_order])[1:20],
mart = mart)
results
library(biomaRt)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
results <- getBM(attributes = c("hgnc_symbol", "description"),
filters = "ensembl_gene_id",
values = rev(geneNames[word_order])[1:20],
mart = mart)
results
as.data.frame(results))
as.data.frame(results)
library(Biobase)
topics_clust <- topics_list[[2]]
clust <- topics_clust$K
word_weights <- topics_clust$theta
diff_vec <- apply(word_weights, 1 , function(per_gene) {
mean(abs(per_gene - median(per_gene)))
})
matplot(word_weights[order(diff_vec), ], type = "l",
ylab = "cluster weights",
xlab = "genes ordered by distances between cluster weights",
main = "3 clusters")
geneNames <- rownames(molecules_single_cell_cycle)
library(biomaRt)
library(knitr)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
results <- getBM(attributes = c("hgnc_symbol", "description"),
filters = "ensembl_gene_id",
values = rev(geneNames[diff_vec])[1:20],
mart = mart)
results
results <- getBM(attributes = c("hgnc_symbol", "description"),
filters = "ensembl_gene_id",
values = rev(geneNames[order(diff_vec)])[1:20],
mart = mart)
results
cell_phase_vector
cell_phase
library(data.table)
library(maptpx)
library(gplots)
library(philentropy)
library(dplyr)
library(edgeR)
library(tsne)
library(qtlcharts)
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
quality_single_cells <- scan("../data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('../data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs <- unique(unlist(lapply(1:5, function(k) X =
match(cell_cycle_genes_list[[k]],
rownames(molecules_single)))) )
labs <-  labs[!is.na(labs)]
molecules_single_cell_cycle <- molecules_single[labs,]
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
#### normalization function
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase))
str(cell_phase_vector)
str(as.matrix(assign_cell_phase))
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase))
str(cell_phase_vector)
cell_phase_vector <- as.factor(cell_phase_vector,
levels = c("G1.S","S", "G2.M", "M", "M.G1"))
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S","S", "G2.M", "M", "M.G1"))
summary(cell_phase_vector)
str(cell_cycle_genes)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase))
str(cell_phase_vector)
str(cell_phase_vector)
is.factor(cell_phase_vector)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase))
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S","S", "G2.M", "M", "M.G1"))
str(cell_phase_vector)
tsne_samples <- tsne(t(molecules_single_cell_cycle), 2)
iplot(tsne_samples[,1], tsne_samples[,2],
rep(1, length(tsne_samples[,1])), cell_phase_vector)
library(data.table)
library(maptpx)
library(gplots)
library(philentropy)
library(dplyr)
library(edgeR)
library(tsne)
library(qtlcharts)
library(ggplot2)
reads <- data.frame(fread('../data/reads.txt'),row.names=1);
molecules <-  data.frame(fread('../data/molecules.txt'),row.names=1);
quality_single_cells <- scan("../data/quality-single-cells.txt",
what = "character")
anno <- data.frame(fread('../data/annotation.txt'));
molecules <- molecules[, grepl("bulk", colnames(molecules)) |
colnames(molecules) %in% quality_single_cells]
anno <- anno[anno$well == "bulk" | anno$sample_id %in% quality_single_cells, ]
stopifnot(ncol(molecules) == nrow(anno),
colnames(molecules) == anno$sample_id)
reads <- reads[, grepl("bulk", colnames(reads)) |
colnames(reads) %in% quality_single_cells]
stopifnot(ncol(reads) == nrow(anno),
colnames(reads) == anno$sample_id)
expressed <- rowSums(molecules[, anno$well == "bulk"]) > 0 &
rowSums(molecules[, anno$well != "bulk"]) > 0
molecules <- molecules[expressed, ]
expressed <- rowSums(reads[, anno$well == "bulk"]) > 0 &
rowSums(reads[, anno$well != "bulk"]) > 0
reads <- reads[expressed, ]
molecules_single <- molecules %>% select(-contains("bulk"))
reads_single <- reads %>% select(-contains("bulk"))
molecules_single <- molecules_single[apply(molecules_single,1,max) < 1024,];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
labs <- unique(unlist(lapply(1:5, function(k) X =
match(cell_cycle_genes_list[[k]],
rownames(molecules_single)))) )
labs <-  labs[!is.na(labs)]
molecules_single_cell_cycle <- molecules_single[labs, ]
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
cor_matrix <- cor(t(combined_matrix))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
#### normalization function
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase))
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S", "S", "G2.M", "M", "M.G1"))
topics_list <- lapply(clust_vec, function(per_clust) {
topics(t(molecules_single_cell_cycle), K = per_clust, tol = 0.005)
})
names(topics_list) <- paste0("clust",clust_vec)
clust_vec <- 2:7
topics_list <- lapply(clust_vec, function(per_clust) {
topics(t(molecules_single_cell_cycle), K = per_clust, tol = 0.005)
})
names(topics_list) <- paste0("clust",clust_vec)
save(topics_list,
file = "../rdas/clustering-cell-cycle-genes/topics-maximum-normalized.rda")
per_clust = 2
nclust <- length(topics_list)
type_info <- cell_phase_vector
topics_clust <- topics_list[[per_clust]]
clust <- topics_clust$K
docweights <- topics_clust$omega
type_ordered <- type_info[order(type_info)]
docweights_ordered <- docweights[order(type_info),]
barplot( t(docweights_ordered),
col = 2:(clust+1), axisnames = F,
space = 0, border=NA,
main = paste("No. of clusters=", clust), las = 1,
ylim = c(0,1), cex.axis = 0.3, cex.main=1.4)
per_clust = 2
per_clust = 1
topics_clust <- topics_list[[per_clust]]
clust <- topics_clust$K
docweights <- topics_clust$omega
type_ordered <- type_info[order(type_info)]
docweights_ordered <- docweights[order(type_info),]
barplot( t(docweights_ordered),
col = 2:(clust+1), axisnames = F,
space = 0, border=NA,
main = paste("No. of clusters=", clust), las = 1,
ylim = c(0,1), cex.axis = 0.3, cex.main=1.4)
?topic
?topics
require(Humanzee)
testDE
